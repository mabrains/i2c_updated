
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v
Parsing SystemVerilog input from `/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v' to AST representation.
Warning: Found one of those horrible `(synopsys|synthesis) full_case' comments.
Yosys does support them but it is recommended to use Verilog `full_case' attributes instead!
Warning: Found one of those horrible `(synopsys|synthesis) parallel_case' comments.
Yosys does support them but it is recommended to use Verilog `parallel_case' attributes instead!
Generating RTLIL representation for module `\i2c_master_bit_ctrl'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v
Parsing SystemVerilog input from `/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v' to AST representation.
Generating RTLIL representation for module `\i2c_master_byte_ctrl'.
/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:193: Warning: Identifier `\slave_reset' is implicitly declared.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openLANE_flow/designs/i2c/src/i2c_master_defines.v
Parsing SystemVerilog input from `/openLANE_flow/designs/i2c/src/i2c_master_defines.v' to AST representation.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /openLANE_flow/designs/i2c/src/i2c_master_top.v
Parsing SystemVerilog input from `/openLANE_flow/designs/i2c/src/i2c_master_top.v' to AST representation.
Generating RTLIL representation for module `\i2c_master_top'.
/openLANE_flow/designs/i2c/src/i2c_master_top.v:267: Warning: Identifier `\slave_dat_req' is implicitly declared.
/openLANE_flow/designs/i2c/src/i2c_master_top.v:268: Warning: Identifier `\slave_dat_avail' is implicitly declared.
Successfully finished Verilog frontend.

5. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/i2c/runs/5th_run_clk20_util35_tardens0.45_flat1_doubleQuotations_edited_config_of_design_noLEC/tmp/synthesis/hierarchy.dot'.
Dumping module i2c_master_top to page 1.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \i2c_master_top
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl

6.2. Analyzing design hierarchy..
Top module:  \i2c_master_top
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl
Removed 0 unused modules.

7. Executing TRIBUF pass.

8. Executing SYNTH pass.

8.1. Executing HIERARCHY pass (managing design hierarchy).

8.1.1. Analyzing design hierarchy..
Top module:  \i2c_master_top
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl

8.1.2. Analyzing design hierarchy..
Top module:  \i2c_master_top
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl
Removed 0 unused modules.

8.2. Executing PROC pass (convert processes to netlists).

8.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:305$161 in module i2c_master_top.
Marked 2 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:274$148 in module i2c_master_top.
Marked 3 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:204$143 in module i2c_master_top.
Marked 2 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:177$141 in module i2c_master_top.
Marked 1 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:162$140 in module i2c_master_top.
Marked 17 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124 in module i2c_master_byte_ctrl.
Marked 3 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:225$119 in module i2c_master_byte_ctrl.
Marked 4 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:210$116 in module i2c_master_byte_ctrl.
Marked 1 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:203$114 in module i2c_master_byte_ctrl.
Marked 3 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:635$95 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:594$83 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:395$78 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:354$65 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:346$62 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:335$57 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:316$49 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:285$37 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:266$33 in module i2c_master_bit_ctrl.
Marked 3 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:259$25 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:240$23 in module i2c_master_bit_ctrl.
Marked 3 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:213$14 in module i2c_master_bit_ctrl.
Marked 1 switch rules as full_case in process $proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:203$2 in module i2c_master_bit_ctrl.
Removed a total of 0 dead cases.

8.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 31 redundant assignments.
Promoted 2 assignments to connections.

8.2.4. Executing PROC_INIT pass (extract init attributes).

8.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_i in `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:305$161'.
Found async reset \rst_i in `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:274$148'.
Found async reset \rst_i in `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:204$143'.
Found async reset \rst_i in `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:177$141'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:225$119'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:210$116'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:203$114'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:635$95'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:594$83'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:395$78'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:354$65'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:346$62'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:335$57'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:316$49'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:285$37'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:266$33'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:259$25'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:240$23'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:213$14'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:203$2'.

8.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:305$161'.
     1/1: $0\wb_inta_o[0:0]
Creating decoders for process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:274$148'.
     1/5: $0\irq_flag[0:0]
     2/5: $0\tip[0:0]
     3/5: $0\rxack[0:0]
     4/5: $0\al[0:0]
     5/5: $0\slave_mode[0:0]
Creating decoders for process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:204$143'.
     1/5: $0\cr[7:0] [7:4]
     2/5: $0\cr[7:0] [3]
     3/5: $0\cr[7:0] [2]
     4/5: $0\cr[7:0] [1]
     5/5: $0\cr[7:0] [0]
Creating decoders for process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:177$141'.
     1/5: $0\prer[15:0] [15:8]
     2/5: $0\prer[15:0] [7:0]
     3/5: $0\txr[7:0]
     4/5: $0\ctr[7:0]
     5/5: $0\sladr[6:0]
Creating decoders for process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:162$140'.
     1/1: $0\wb_dat_o[7:0]
Creating decoders for process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:157$136'.
Creating decoders for process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
     1/15: $0\slave_cmd_ack[0:0]
     2/15: $0\slave_cmd_out[1:0]
     3/15: $0\cmd_ack[0:0]
     4/15: $0\ld[0:0]
     5/15: $0\shift[0:0]
     6/15: $0\core_txd[0:0]
     7/15: $0\core_cmd[3:0]
     8/15: $0\slave_dat_avail[0:0]
     9/15: $0\slave_dat_req[0:0]
    10/15: $0\ack_out[0:0]
    11/15: $0\slave_act[0:0]
    12/15: $0\c_state[9:0]
    13/15: $0\sl_wait[0:0]
    14/15: $0\slave_cmd[1:0]
    15/15: $0\master_mode[0:0]
Creating decoders for process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:225$119'.
     1/1: $0\dcnt[2:0]
Creating decoders for process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:210$116'.
     1/1: $0\sr[7:0]
Creating decoders for process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:203$114'.
     1/1: $0\slave_adr_received_d[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:635$95'.
     1/4: $0\scl_oen_slave[0:0]
     2/4: $0\cmd_slave_ack[0:0]
     3/4: $0\sda_oen_slave[0:0]
     4/4: $0\slave_state[4:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:594$83'.
     1/4: $0\slave_adr_received[0:0]
     2/4: $0\slave_act[0:0]
     3/4: $0\slave_cnt[3:0]
     4/4: $0\slave_adr[7:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:395$78'.
     1/5: $0\cmd_ack[0:0]
     2/5: $0\sda_oen_master[0:0]
     3/5: $0\scl_oen_master[0:0]
     4/5: $0\c_state[17:0]
     5/5: $0\sda_chk[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:364$75'.
     1/1: $0\dout[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:354$65'.
     1/1: $0\al[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:346$62'.
     1/1: $0\cmd_stop[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:335$57'.
     1/1: $0\busy[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:316$49'.
     1/2: $0\sto_condition[0:0]
     2/2: $0\sta_condition[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:285$37'.
     1/4: $0\dSDA[0:0]
     2/4: $0\dSCL[0:0]
     3/4: $0\sSDA[0:0]
     4/4: $0\sSCL[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:266$33'.
     1/2: $0\fSDA[2:0]
     2/2: $0\fSCL[2:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:259$25'.
     1/1: $0\filter_cnt[13:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:240$23'.
     1/2: $0\cSDA[1:0]
     2/2: $0\cSCL[1:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:213$14'.
     1/2: $0\clk_en[0:0]
     2/2: $0\cnt[15:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:203$2'.
     1/1: $0\slave_wait[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:198$1'.

8.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

8.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\i2c_master_top.\wb_inta_o' using process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:305$161'.
  created $adff cell `$procdff$921' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\al' using process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:274$148'.
  created $adff cell `$procdff$922' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\rxack' using process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:274$148'.
  created $adff cell `$procdff$923' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\tip' using process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:274$148'.
  created $adff cell `$procdff$924' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\irq_flag' using process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:274$148'.
  created $adff cell `$procdff$925' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\slave_mode' using process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:274$148'.
  created $adff cell `$procdff$926' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\cr' using process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:204$143'.
  created $adff cell `$procdff$927' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\prer' using process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:177$141'.
  created $adff cell `$procdff$928' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\ctr' using process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:177$141'.
  created $adff cell `$procdff$929' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\txr' using process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:177$141'.
  created $adff cell `$procdff$930' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\sladr' using process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:177$141'.
  created $adff cell `$procdff$931' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\wb_dat_o' using process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:162$140'.
  created $dff cell `$procdff$932' with positive edge clock.
Creating register for signal `\i2c_master_top.\wb_ack_o' using process `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:157$136'.
  created $dff cell `$procdff$933' with positive edge clock.
Creating register for signal `\i2c_master_byte_ctrl.\cmd_ack' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$934' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\master_mode' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$935' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\slave_cmd' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$936' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\sl_wait' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$937' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\c_state' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$938' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\slave_act' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$939' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\ack_out' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$940' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\slave_dat_req' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$941' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\slave_dat_avail' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$942' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\slave_cmd_ack' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$943' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\core_cmd' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$944' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\core_txd' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$945' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\shift' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$946' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\ld' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$947' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\slave_cmd_out' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
  created $adff cell `$procdff$948' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\dcnt' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:225$119'.
  created $adff cell `$procdff$949' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\sr' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:210$116'.
  created $adff cell `$procdff$950' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\slave_adr_received_d' using process `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:203$114'.
  created $adff cell `$procdff$951' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cmd_slave_ack' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:635$95'.
  created $adff cell `$procdff$952' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\slave_state' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:635$95'.
  created $adff cell `$procdff$953' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sda_oen_slave' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:635$95'.
  created $adff cell `$procdff$954' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\scl_oen_slave' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:635$95'.
  created $adff cell `$procdff$955' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\slave_adr_received' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:594$83'.
  created $adff cell `$procdff$956' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\slave_adr' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:594$83'.
  created $adff cell `$procdff$957' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\slave_cnt' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:594$83'.
  created $adff cell `$procdff$958' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\slave_act' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:594$83'.
  created $adff cell `$procdff$959' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cmd_ack' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:395$78'.
  created $adff cell `$procdff$960' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sda_chk' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:395$78'.
  created $adff cell `$procdff$961' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\c_state' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:395$78'.
  created $adff cell `$procdff$962' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\scl_oen_master' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:395$78'.
  created $adff cell `$procdff$963' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sda_oen_master' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:395$78'.
  created $adff cell `$procdff$964' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dout' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:364$75'.
  created $dff cell `$procdff$965' with positive edge clock.
Creating register for signal `\i2c_master_bit_ctrl.\al' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:354$65'.
  created $adff cell `$procdff$966' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cmd_stop' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:346$62'.
  created $adff cell `$procdff$967' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\busy' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:335$57'.
  created $adff cell `$procdff$968' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sta_condition' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:316$49'.
  created $adff cell `$procdff$969' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sto_condition' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:316$49'.
  created $adff cell `$procdff$970' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sSCL' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:285$37'.
  created $adff cell `$procdff$971' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sSDA' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:285$37'.
  created $adff cell `$procdff$972' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dSCL' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:285$37'.
  created $adff cell `$procdff$973' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dSDA' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:285$37'.
  created $adff cell `$procdff$974' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\fSCL' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:266$33'.
  created $adff cell `$procdff$975' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\fSDA' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:266$33'.
  created $adff cell `$procdff$976' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\filter_cnt' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:259$25'.
  created $adff cell `$procdff$977' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cSCL' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:240$23'.
  created $adff cell `$procdff$978' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cSDA' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:240$23'.
  created $adff cell `$procdff$979' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\clk_en' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:213$14'.
  created $adff cell `$procdff$980' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cnt' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:213$14'.
  created $adff cell `$procdff$981' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\slave_wait' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:203$2'.
  created $adff cell `$procdff$982' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dscl_oen' using process `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:198$1'.
  created $dff cell `$procdff$983' with positive edge clock.

8.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:305$161'.
Removing empty process `i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:305$161'.
Found and cleaned up 2 empty switches in `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:274$148'.
Removing empty process `i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:274$148'.
Found and cleaned up 4 empty switches in `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:204$143'.
Removing empty process `i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:204$143'.
Found and cleaned up 3 empty switches in `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:177$141'.
Removing empty process `i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:177$141'.
Found and cleaned up 1 empty switch in `\i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:162$140'.
Removing empty process `i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:162$140'.
Removing empty process `i2c_master_top.$proc$/openLANE_flow/designs/i2c/src/i2c_master_top.v:157$136'.
Found and cleaned up 25 empty switches in `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
Removing empty process `i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:244$124'.
Found and cleaned up 3 empty switches in `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:225$119'.
Removing empty process `i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:225$119'.
Found and cleaned up 4 empty switches in `\i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:210$116'.
Removing empty process `i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:210$116'.
Removing empty process `i2c_master_byte_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:203$114'.
Found and cleaned up 8 empty switches in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:635$95'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:635$95'.
Found and cleaned up 4 empty switches in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:594$83'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:594$83'.
Found and cleaned up 4 empty switches in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:395$78'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:395$78'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:364$75'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:364$75'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:354$65'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:354$65'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:346$62'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:346$62'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:335$57'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:335$57'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:316$49'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:316$49'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:285$37'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:285$37'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:266$33'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:266$33'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:259$25'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:259$25'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:240$23'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:240$23'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:213$14'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:213$14'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:203$2'.
Removing empty process `i2c_master_bit_ctrl.$proc$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:198$1'.
Cleaned up 73 empty switches.

8.3. Executing FLATTEN pass (flatten design).
Deleting now unused module i2c_master_byte_ctrl.
Deleting now unused module i2c_master_bit_ctrl.
<suppressed ~2 debug messages>

8.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.
<suppressed ~116 debug messages>

8.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 5 unused cells and 295 unused wires.
<suppressed ~11 debug messages>

8.6. Executing CHECK pass (checking for obvious problems).
checking module i2c_master_top..
found and reported 0 problems.

8.7. Executing OPT pass (performing simple optimizations).

8.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

8.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
<suppressed ~369 debug messages>
Removed a total of 123 cells.

8.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~66 debug messages>

8.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$745: $auto$opt_reduce.cc:134:opt_mux$987
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$755: { $flatten\byte_controller.\bit_controller.$procmux$773_CMP $auto$opt_reduce.cc:134:opt_mux$993 $auto$opt_reduce.cc:134:opt_mux$991 $auto$opt_reduce.cc:134:opt_mux$989 }
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$779: { $auto$opt_reduce.cc:134:opt_mux$999 $auto$opt_reduce.cc:134:opt_mux$997 $auto$opt_reduce.cc:134:opt_mux$995 }
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$803: { $flatten\byte_controller.\bit_controller.$procmux$773_CMP $flatten\byte_controller.\bit_controller.$procmux$772_CMP $flatten\byte_controller.\bit_controller.$procmux$771_CMP $flatten\byte_controller.\bit_controller.$procmux$770_CMP $flatten\byte_controller.\bit_controller.$procmux$769_CMP $flatten\byte_controller.\bit_controller.$procmux$767_CMP $flatten\byte_controller.\bit_controller.$procmux$766_CMP $flatten\byte_controller.\bit_controller.$procmux$765_CMP $flatten\byte_controller.\bit_controller.$procmux$763_CMP $flatten\byte_controller.\bit_controller.$procmux$762_CMP $flatten\byte_controller.\bit_controller.$procmux$761_CMP $flatten\byte_controller.\bit_controller.$procmux$759_CMP $flatten\byte_controller.\bit_controller.$procmux$758_CMP $flatten\byte_controller.\bit_controller.$procmux$757_CMP $auto$opt_reduce.cc:134:opt_mux$1001 }
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$833: { $flatten\byte_controller.\bit_controller.$procmux$757_CMP $auto$opt_reduce.cc:134:opt_mux$1003 }
  Optimizing cells in module \i2c_master_top.
Performed a total of 5 changes.

8.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

8.7.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 130 unused wires.
<suppressed ~1 debug messages>

8.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

8.7.9. Rerunning OPT passes. (Maybe there is more to do..)

8.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~69 debug messages>

8.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$669: $auto$opt_reduce.cc:134:opt_mux$1005
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$696: { $flatten\byte_controller.\bit_controller.$procmux$690_CMP $flatten\byte_controller.\bit_controller.$procmux$685_CMP $flatten\byte_controller.\bit_controller.$procmux$702_CMP $flatten\byte_controller.\bit_controller.$procmux$701_CMP $flatten\byte_controller.\bit_controller.$procmux$700_CMP $auto$opt_reduce.cc:134:opt_mux$1007 }
  Optimizing cells in module \i2c_master_top.
Performed a total of 2 changes.

8.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

8.7.13. Executing OPT_DFF pass (perform DFF optimizations).

8.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

8.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

8.7.16. Rerunning OPT passes. (Maybe there is more to do..)

8.7.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~69 debug messages>

8.7.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

8.7.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

8.7.20. Executing OPT_DFF pass (perform DFF optimizations).

8.7.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

8.7.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

8.7.23. Finished OPT passes. (There is nothing left to do.)

8.8. Executing FSM pass (extract and optimize FSM).

8.8.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking i2c_master_top.byte_controller.bit_controller.c_state as FSM state register:
    Users of register don't seem to benefit from recoding.
Found FSM state register i2c_master_top.byte_controller.bit_controller.slave_state.
Found FSM state register i2c_master_top.byte_controller.c_state.
Found FSM state register i2c_master_top.byte_controller.core_cmd.
Not marking i2c_master_top.byte_controller.slave_cmd as FSM state register:
    Users of register don't seem to benefit from recoding.

8.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\byte_controller.bit_controller.slave_state' from module `\i2c_master_top'.
  found $adff cell for state register: $flatten\byte_controller.\bit_controller.$procdff$953
  root of input selection tree: $flatten\byte_controller.\bit_controller.$0\slave_state[4:0]
  found reset state: 5'00000 (from async reset)
  found ctrl input: $flatten\byte_controller.\bit_controller.$logic_or$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:643$99_Y
  found ctrl input: $auto$opt_reduce.cc:134:opt_mux$1005
  found ctrl input: $flatten\byte_controller.\bit_controller.$procmux$700_CMP
  found ctrl input: $flatten\byte_controller.\bit_controller.$procmux$701_CMP
  found ctrl input: $flatten\byte_controller.\bit_controller.$procmux$702_CMP
  found ctrl input: $flatten\byte_controller.\bit_controller.$procmux$685_CMP
  found ctrl input: $flatten\byte_controller.\bit_controller.$procmux$690_CMP
  found ctrl input: $flatten\byte_controller.\bit_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:209$12_Y
  found state code: 5'10000
  found ctrl input: $flatten\byte_controller.\bit_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:365$77_Y
  found state code: 5'01000
  found state code: 5'10001
  found ctrl input: $flatten\byte_controller.\bit_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:682$102_Y
  found state code: 5'00010
  found ctrl input: $flatten\byte_controller.\bit_controller.$procmux$711_CMP
  found ctrl input: $flatten\byte_controller.\bit_controller.$procmux$689_CMP
  found state code: 5'00100
  found state code: 5'00001
  found ctrl output: $flatten\byte_controller.\bit_controller.$procmux$670_CMP
  found ctrl output: $flatten\byte_controller.\bit_controller.$procmux$673_CMP
  found ctrl output: $flatten\byte_controller.\bit_controller.$procmux$685_CMP
  found ctrl output: $flatten\byte_controller.\bit_controller.$procmux$690_CMP
  found ctrl output: $flatten\byte_controller.\bit_controller.$procmux$700_CMP
  found ctrl output: $flatten\byte_controller.\bit_controller.$procmux$701_CMP
  found ctrl output: $flatten\byte_controller.\bit_controller.$procmux$702_CMP
  ctrl inputs: { $auto$opt_reduce.cc:134:opt_mux$1005 $flatten\byte_controller.\bit_controller.$procmux$711_CMP $flatten\byte_controller.\bit_controller.$procmux$689_CMP $flatten\byte_controller.\bit_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:682$102_Y $flatten\byte_controller.\bit_controller.$logic_or$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:643$99_Y $flatten\byte_controller.\bit_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:365$77_Y $flatten\byte_controller.\bit_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:209$12_Y }
  ctrl outputs: { $flatten\byte_controller.\bit_controller.$procmux$702_CMP $flatten\byte_controller.\bit_controller.$procmux$701_CMP $flatten\byte_controller.\bit_controller.$procmux$700_CMP $flatten\byte_controller.\bit_controller.$procmux$690_CMP $flatten\byte_controller.\bit_controller.$procmux$685_CMP $flatten\byte_controller.\bit_controller.$procmux$673_CMP $flatten\byte_controller.\bit_controller.$procmux$670_CMP $flatten\byte_controller.\bit_controller.$0\slave_state[4:0] }
  transition:    5'00000 7'-00-0-- ->    5'00000 12'000100000000
  transition:    5'00000 7'--1-0-- ->    5'00001 12'000100000001
  transition:    5'00000 7'-1--0-- ->    5'00100 12'000100000100
  transition:    5'00000 7'----1-- ->    5'00000 12'000100000000
  transition:    5'10000 7'----0-- ->    5'10001 12'100000010001
  transition:    5'10000 7'----1-- ->    5'00000 12'100000000000
  transition:    5'01000 7'----0-0 ->    5'01000 12'000000101000
  transition:    5'01000 7'----0-1 ->    5'10000 12'000000110000
  transition:    5'01000 7'----1-- ->    5'00000 12'000000100000
  transition:    5'00100 7'----00- ->    5'00100 12'001000000100
  transition:    5'00100 7'----01- ->    5'01000 12'001000001000
  transition:    5'00100 7'----1-- ->    5'00000 12'001000000000
  transition:    5'00010 7'----0-0 ->    5'00010 12'000001000010
  transition:    5'00010 7'----0-1 ->    5'10000 12'000001010000
  transition:    5'00010 7'----1-- ->    5'00000 12'000001000000
  transition:    5'00001 7'---00-- ->    5'00001 12'000010000001
  transition:    5'00001 7'---10-- ->    5'00010 12'000010000010
  transition:    5'00001 7'----1-- ->    5'00000 12'000010000000
  transition:    5'10001 7'----0-- ->    5'00000 12'010000000000
  transition:    5'10001 7'----1-- ->    5'00000 12'010000000000
Extracting FSM `\byte_controller.c_state' from module `\i2c_master_top'.
  found $adff cell for state register: $flatten\byte_controller.$procdff$938
  root of input selection tree: $flatten\byte_controller.$0\c_state[9:0]
  found reset state: 10'0000000000 (from async reset)
  found ctrl input: $flatten\byte_controller.$or$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:263$127_Y
  found ctrl input: $flatten\byte_controller.$procmux$299_CMP
  found ctrl input: $flatten\byte_controller.$procmux$306_CMP
  found ctrl input: $flatten\byte_controller.$procmux$335_CMP
  found ctrl input: $flatten\byte_controller.$procmux$341_CMP
  found ctrl input: $flatten\byte_controller.$procmux$317_CMP
  found ctrl input: $flatten\byte_controller.$procmux$289_CMP
  found ctrl input: $flatten\byte_controller.$procmux$541_CMP
  found ctrl input: $flatten\byte_controller.$procmux$320_CMP
  found ctrl input: $flatten\byte_controller.$procmux$344_CMP
  found ctrl input: $flatten\byte_controller.$procmux$350_CMP
  found ctrl input: $flatten\byte_controller.$procmux$326_CMP
  found ctrl input: \byte_controller.bit_controller.cmd_ack
  found ctrl input: \cr [6]
  found state code: 10'0000010000
  found ctrl input: $flatten\byte_controller.$reduce_or$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:235$122_Y
  found state code: 10'0000001000
  found state code: 10'0000000010
  found state code: 10'0000000100
  found ctrl input: \cr [5]
  found ctrl input: \byte_controller.bit_controller.cmd_slave_ack
  found ctrl input: \byte_controller.bit_controller.dout
  found state code: 10'0100000000
  found ctrl input: \byte_controller.bit_controller.slave_adr [0]
  found state code: 10'0010000000
  found state code: 10'0001000000
  found ctrl input: \cr [1]
  found state code: 10'1000000000
  found state code: 10'0000100000
  found ctrl input: $flatten\byte_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:295$130_Y
  found ctrl input: $flatten\byte_controller.$logic_and$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:305$132_Y
  found ctrl input: \cr [7]
  found ctrl input: \cr [4]
  found state code: 10'0000000001
  found ctrl output: $flatten\byte_controller.$procmux$541_CMP
  found ctrl output: $flatten\byte_controller.$procmux$350_CMP
  found ctrl output: $flatten\byte_controller.$procmux$344_CMP
  found ctrl output: $flatten\byte_controller.$procmux$341_CMP
  found ctrl output: $flatten\byte_controller.$procmux$335_CMP
  found ctrl output: $flatten\byte_controller.$procmux$326_CMP
  found ctrl output: $flatten\byte_controller.$procmux$320_CMP
  found ctrl output: $flatten\byte_controller.$procmux$317_CMP
  found ctrl output: $flatten\byte_controller.$procmux$306_CMP
  found ctrl output: $flatten\byte_controller.$procmux$299_CMP
  found ctrl output: $flatten\byte_controller.$procmux$289_CMP
  ctrl inputs: { $flatten\byte_controller.$reduce_or$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:235$122_Y $flatten\byte_controller.$or$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:263$127_Y $flatten\byte_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:295$130_Y $flatten\byte_controller.$logic_and$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:305$132_Y \byte_controller.bit_controller.cmd_ack \byte_controller.bit_controller.dout \byte_controller.bit_controller.slave_adr [0] \byte_controller.bit_controller.cmd_slave_ack \cr [7:4] \cr [1] }
  ctrl outputs: { $flatten\byte_controller.$0\c_state[9:0] $flatten\byte_controller.$procmux$289_CMP $flatten\byte_controller.$procmux$299_CMP $flatten\byte_controller.$procmux$306_CMP $flatten\byte_controller.$procmux$317_CMP $flatten\byte_controller.$procmux$320_CMP $flatten\byte_controller.$procmux$326_CMP $flatten\byte_controller.$procmux$335_CMP $flatten\byte_controller.$procmux$341_CMP $flatten\byte_controller.$procmux$344_CMP $flatten\byte_controller.$procmux$350_CMP $flatten\byte_controller.$procmux$541_CMP }
  transition: 10'0000000000 13'-000--------- -> 10'0000000000 21'000000000000000100000
  transition: 10'0000000000 13'-001----0-00- -> 10'0000010000 21'000001000000000100000
  transition: 10'0000000000 13'-001----0-01- -> 10'0000000100 21'000000010000000100000
  transition: 10'0000000000 13'-001----0-1-- -> 10'0000000010 21'000000001000000100000
  transition: 10'0000000000 13'-001----1---- -> 10'0000000001 21'000000000100000100000
  transition: 10'0000000000 13'-01---------- -> 10'0000100000 21'000010000000000100000
  transition: 10'0000000000 13'-1----------- -> 10'0000000000 21'000000000000000100000
  transition: 10'1000000000 13'-0----0------ -> 10'0010000000 21'001000000000000000001
  transition: 10'1000000000 13'-0----1------ -> 10'0001000000 21'000100000000000000001
  transition: 10'1000000000 13'-1----------- -> 10'0000000000 21'000000000000000000001
  transition: 10'0100000000 13'-0----------0 -> 10'0100000000 21'010000000000001000000
  transition: 10'0100000000 13'-0----------1 -> 10'1000000000 21'100000000000001000000
  transition: 10'0100000000 13'-1----------- -> 10'0000000000 21'000000000000001000000
  transition: 10'0010000000 13'-0-----0----- -> 10'0010000000 21'001000000000000000100
  transition: 10'0010000000 13'00-----1----- -> 10'0000100000 21'000010000000000000100
  transition: 10'0010000000 13'10-----1----- -> 10'0010000000 21'001000000000000000100
  transition: 10'0010000000 13'-1----------- -> 10'0000000000 21'000000000000000000100
  transition: 10'0001000000 13'-0-----0----- -> 10'0001000000 21'000100000000000000010
  transition: 10'0001000000 13'00-----1----- -> 10'0000100000 21'000010000000000000010
  transition: 10'0001000000 13'10-----1----- -> 10'0001000000 21'000100000000000000010
  transition: 10'0001000000 13'-1----------- -> 10'0000000000 21'000000000000000000010
  transition: 10'0000100000 13'-0-----0----- -> 10'0000100000 21'000010000010000000000
  transition: 10'0000100000 13'-0---0-1----- -> 10'0100000000 21'010000000010000000000
  transition: 10'0000100000 13'-0---1-1----- -> 10'0000000000 21'000000000010000000000
  transition: 10'0000100000 13'-1----------- -> 10'0000000000 21'000000000010000000000
  transition: 10'0000010000 13'-0--0-------- -> 10'0000010000 21'000001000001000000000
  transition: 10'0000010000 13'-0--1-------- -> 10'0000000000 21'000000000001000000000
  transition: 10'0000010000 13'-1----------- -> 10'0000000000 21'000000000001000000000
  transition: 10'0000001000 13'-0--0-------- -> 10'0000001000 21'000000100000100000000
  transition: 10'0000001000 13'-0--1----0--- -> 10'0000000000 21'000000000000100000000
  transition: 10'0000001000 13'-0--1----1--- -> 10'0000010000 21'000001000000100000000
  transition: 10'0000001000 13'-1----------- -> 10'0000000000 21'000000000000100000000
  transition: 10'0000000100 13'-0--0-------- -> 10'0000000100 21'000000010000000001000
  transition: 10'0000000100 13'00--1-------- -> 10'0000001000 21'000000100000000001000
  transition: 10'0000000100 13'10--1-------- -> 10'0000000100 21'000000010000000001000
  transition: 10'0000000100 13'-1----------- -> 10'0000000000 21'000000000000000001000
  transition: 10'0000000010 13'-0--0-------- -> 10'0000000010 21'000000001000000010000
  transition: 10'0000000010 13'00--1-------- -> 10'0000001000 21'000000100000000010000
  transition: 10'0000000010 13'10--1-------- -> 10'0000000010 21'000000001000000010000
  transition: 10'0000000010 13'-1----------- -> 10'0000000000 21'000000000000000010000
  transition: 10'0000000001 13'-0--0-------- -> 10'0000000001 21'000000000100010000000
  transition: 10'0000000001 13'-0--1-----0-- -> 10'0000000100 21'000000010000010000000
  transition: 10'0000000001 13'-0--1-----1-- -> 10'0000000010 21'000000001000010000000
  transition: 10'0000000001 13'-1----------- -> 10'0000000000 21'000000000000010000000
Extracting FSM `\byte_controller.core_cmd' from module `\i2c_master_top'.
  found $adff cell for state register: $flatten\byte_controller.$procdff$944
  root of input selection tree: $flatten\byte_controller.$0\core_cmd[3:0]
  found reset state: 4'0000 (from async reset)
  found ctrl input: $flatten\byte_controller.$or$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:263$127_Y
  found ctrl input: $flatten\byte_controller.$procmux$299_CMP
  found ctrl input: $flatten\byte_controller.$procmux$306_CMP
  found ctrl input: $flatten\byte_controller.$procmux$335_CMP
  found ctrl input: $flatten\byte_controller.$procmux$341_CMP
  found ctrl input: $flatten\byte_controller.$procmux$317_CMP
  found ctrl input: $flatten\byte_controller.$procmux$326_CMP
  found ctrl input: \byte_controller.bit_controller.cmd_ack
  found ctrl input: \cr [6]
  found state code: 4'0010
  found ctrl input: $flatten\byte_controller.$reduce_or$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:235$122_Y
  found state code: 4'0100
  found state code: 4'1000
  found ctrl input: \cr [5]
  found ctrl input: $flatten\byte_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:295$130_Y
  found ctrl input: $flatten\byte_controller.$logic_and$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:305$132_Y
  found ctrl input: \cr [7]
  found ctrl input: \cr [4]
  found state code: 4'0001
  found ctrl output: $flatten\byte_controller.\bit_controller.$eq$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:352$64_Y
  found ctrl output: $flatten\byte_controller.\bit_controller.$procmux$823_CMP
  found ctrl output: $flatten\byte_controller.\bit_controller.$procmux$824_CMP
  found ctrl output: $flatten\byte_controller.\bit_controller.$procmux$826_CMP
  ctrl inputs: { $flatten\byte_controller.$reduce_or$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:235$122_Y $flatten\byte_controller.$or$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:263$127_Y $flatten\byte_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:295$130_Y $flatten\byte_controller.$logic_and$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:305$132_Y $flatten\byte_controller.$procmux$299_CMP $flatten\byte_controller.$procmux$306_CMP $flatten\byte_controller.$procmux$317_CMP $flatten\byte_controller.$procmux$326_CMP $flatten\byte_controller.$procmux$335_CMP $flatten\byte_controller.$procmux$341_CMP \byte_controller.bit_controller.cmd_ack \cr [7:4] }
  ctrl outputs: { $flatten\byte_controller.$0\core_cmd[3:0] $flatten\byte_controller.\bit_controller.$procmux$826_CMP $flatten\byte_controller.\bit_controller.$procmux$824_CMP $flatten\byte_controller.\bit_controller.$procmux$823_CMP $flatten\byte_controller.\bit_controller.$eq$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:352$64_Y }
  transition:     4'0000 15'-0--000000----- ->     4'0000 8'00000000
  transition:     4'0000 15'-000---1------- ->     4'0000 8'00000000
  transition:     4'0000 15'-001---1---0-00 ->     4'0010 8'00100000
  transition:     4'0000 15'-001---1---0-01 ->     4'0100 8'01000000
  transition:     4'0000 15'-001---1---0-1- ->     4'1000 8'10000000
  transition:     4'0000 15'-001---1---1--- ->     4'0001 8'00010000
  transition:     4'0000 15'-01----1------- ->     4'0000 8'00000000
  transition:     4'0000 15'-0----1---0---- ->     4'0000 8'00000000
  transition:     4'0000 15'-0----1---1--0- ->     4'0100 8'01000000
  transition:     4'0000 15'-0----1---1--1- ->     4'1000 8'10000000
  transition:     4'0000 15'-0-------10---- ->     4'0000 8'00000000
  transition:     4'0000 15'00-------11---- ->     4'1000 8'10000000
  transition:     4'0000 15'10-------11---- ->     4'0100 8'01000000
  transition:     4'0000 15'-0------1-0---- ->     4'0000 8'00000000
  transition:     4'0000 15'00------1-1---- ->     4'0100 8'01000000
  transition:     4'0000 15'10------1-1---- ->     4'1000 8'10000000
  transition:     4'0000 15'-0---1----0---- ->     4'0000 8'00000000
  transition:     4'0000 15'-0---1----1-0-- ->     4'0000 8'00000000
  transition:     4'0000 15'-0---1----1-1-- ->     4'0010 8'00100000
  transition:     4'0000 15'-0--1-----0---- ->     4'0000 8'00000000
  transition:     4'0000 15'-0--1-----1---- ->     4'0000 8'00000000
  transition:     4'0000 15'-1------------- ->     4'0000 8'00000000
  transition:     4'1000 15'-0--000000----- ->     4'1000 8'10000010
  transition:     4'1000 15'-000---1------- ->     4'1000 8'10000010
  transition:     4'1000 15'-001---1---0-00 ->     4'0010 8'00100010
  transition:     4'1000 15'-001---1---0-01 ->     4'0100 8'01000010
  transition:     4'1000 15'-001---1---0-1- ->     4'1000 8'10000010
  transition:     4'1000 15'-001---1---1--- ->     4'0001 8'00010010
  transition:     4'1000 15'-01----1------- ->     4'1000 8'10000010
  transition:     4'1000 15'-0----1---0---- ->     4'1000 8'10000010
  transition:     4'1000 15'-0----1---1--0- ->     4'0100 8'01000010
  transition:     4'1000 15'-0----1---1--1- ->     4'1000 8'10000010
  transition:     4'1000 15'-0-------10---- ->     4'1000 8'10000010
  transition:     4'1000 15'00-------11---- ->     4'1000 8'10000010
  transition:     4'1000 15'10-------11---- ->     4'0100 8'01000010
  transition:     4'1000 15'-0------1-0---- ->     4'1000 8'10000010
  transition:     4'1000 15'00------1-1---- ->     4'0100 8'01000010
  transition:     4'1000 15'10------1-1---- ->     4'1000 8'10000010
  transition:     4'1000 15'-0---1----0---- ->     4'1000 8'10000010
  transition:     4'1000 15'-0---1----1-0-- ->     4'0000 8'00000010
  transition:     4'1000 15'-0---1----1-1-- ->     4'0010 8'00100010
  transition:     4'1000 15'-0--1-----0---- ->     4'1000 8'10000010
  transition:     4'1000 15'-0--1-----1---- ->     4'0000 8'00000010
  transition:     4'1000 15'-1------------- ->     4'0000 8'00000010
  transition:     4'0100 15'-0--000000----- ->     4'0100 8'01000100
  transition:     4'0100 15'-000---1------- ->     4'0100 8'01000100
  transition:     4'0100 15'-001---1---0-00 ->     4'0010 8'00100100
  transition:     4'0100 15'-001---1---0-01 ->     4'0100 8'01000100
  transition:     4'0100 15'-001---1---0-1- ->     4'1000 8'10000100
  transition:     4'0100 15'-001---1---1--- ->     4'0001 8'00010100
  transition:     4'0100 15'-01----1------- ->     4'0100 8'01000100
  transition:     4'0100 15'-0----1---0---- ->     4'0100 8'01000100
  transition:     4'0100 15'-0----1---1--0- ->     4'0100 8'01000100
  transition:     4'0100 15'-0----1---1--1- ->     4'1000 8'10000100
  transition:     4'0100 15'-0-------10---- ->     4'0100 8'01000100
  transition:     4'0100 15'00-------11---- ->     4'1000 8'10000100
  transition:     4'0100 15'10-------11---- ->     4'0100 8'01000100
  transition:     4'0100 15'-0------1-0---- ->     4'0100 8'01000100
  transition:     4'0100 15'00------1-1---- ->     4'0100 8'01000100
  transition:     4'0100 15'10------1-1---- ->     4'1000 8'10000100
  transition:     4'0100 15'-0---1----0---- ->     4'0100 8'01000100
  transition:     4'0100 15'-0---1----1-0-- ->     4'0000 8'00000100
  transition:     4'0100 15'-0---1----1-1-- ->     4'0010 8'00100100
  transition:     4'0100 15'-0--1-----0---- ->     4'0100 8'01000100
  transition:     4'0100 15'-0--1-----1---- ->     4'0000 8'00000100
  transition:     4'0100 15'-1------------- ->     4'0000 8'00000100
  transition:     4'0010 15'-0--000000----- ->     4'0010 8'00100001
  transition:     4'0010 15'-000---1------- ->     4'0010 8'00100001
  transition:     4'0010 15'-001---1---0-00 ->     4'0010 8'00100001
  transition:     4'0010 15'-001---1---0-01 ->     4'0100 8'01000001
  transition:     4'0010 15'-001---1---0-1- ->     4'1000 8'10000001
  transition:     4'0010 15'-001---1---1--- ->     4'0001 8'00010001
  transition:     4'0010 15'-01----1------- ->     4'0010 8'00100001
  transition:     4'0010 15'-0----1---0---- ->     4'0010 8'00100001
  transition:     4'0010 15'-0----1---1--0- ->     4'0100 8'01000001
  transition:     4'0010 15'-0----1---1--1- ->     4'1000 8'10000001
  transition:     4'0010 15'-0-------10---- ->     4'0010 8'00100001
  transition:     4'0010 15'00-------11---- ->     4'1000 8'10000001
  transition:     4'0010 15'10-------11---- ->     4'0100 8'01000001
  transition:     4'0010 15'-0------1-0---- ->     4'0010 8'00100001
  transition:     4'0010 15'00------1-1---- ->     4'0100 8'01000001
  transition:     4'0010 15'10------1-1---- ->     4'1000 8'10000001
  transition:     4'0010 15'-0---1----0---- ->     4'0010 8'00100001
  transition:     4'0010 15'-0---1----1-0-- ->     4'0000 8'00000001
  transition:     4'0010 15'-0---1----1-1-- ->     4'0010 8'00100001
  transition:     4'0010 15'-0--1-----0---- ->     4'0010 8'00100001
  transition:     4'0010 15'-0--1-----1---- ->     4'0000 8'00000001
  transition:     4'0010 15'-1------------- ->     4'0000 8'00000001
  transition:     4'0001 15'-0--000000----- ->     4'0001 8'00011000
  transition:     4'0001 15'-000---1------- ->     4'0001 8'00011000
  transition:     4'0001 15'-001---1---0-00 ->     4'0010 8'00101000
  transition:     4'0001 15'-001---1---0-01 ->     4'0100 8'01001000
  transition:     4'0001 15'-001---1---0-1- ->     4'1000 8'10001000
  transition:     4'0001 15'-001---1---1--- ->     4'0001 8'00011000
  transition:     4'0001 15'-01----1------- ->     4'0001 8'00011000
  transition:     4'0001 15'-0----1---0---- ->     4'0001 8'00011000
  transition:     4'0001 15'-0----1---1--0- ->     4'0100 8'01001000
  transition:     4'0001 15'-0----1---1--1- ->     4'1000 8'10001000
  transition:     4'0001 15'-0-------10---- ->     4'0001 8'00011000
  transition:     4'0001 15'00-------11---- ->     4'1000 8'10001000
  transition:     4'0001 15'10-------11---- ->     4'0100 8'01001000
  transition:     4'0001 15'-0------1-0---- ->     4'0001 8'00011000
  transition:     4'0001 15'00------1-1---- ->     4'0100 8'01001000
  transition:     4'0001 15'10------1-1---- ->     4'1000 8'10001000
  transition:     4'0001 15'-0---1----0---- ->     4'0001 8'00011000
  transition:     4'0001 15'-0---1----1-0-- ->     4'0000 8'00001000
  transition:     4'0001 15'-0---1----1-1-- ->     4'0010 8'00101000
  transition:     4'0001 15'-0--1-----0---- ->     4'0001 8'00011000
  transition:     4'0001 15'-0--1-----1---- ->     4'0000 8'00001000
  transition:     4'0001 15'-1------------- ->     4'0000 8'00001000

8.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\byte_controller.core_cmd$1030' from module `\i2c_master_top'.
  Merging pattern 15'-0--1-----0---- and 15'-0--1-----1---- from group (0 0 8'00000000).
  Merging pattern 15'-0--1-----1---- and 15'-0--1-----0---- from group (0 0 8'00000000).
Optimizing FSM `$fsm$\byte_controller.c_state$1017' from module `\i2c_master_top'.
Optimizing FSM `$fsm$\byte_controller.bit_controller.slave_state$1008' from module `\i2c_master_top'.
  Merging pattern 7'----0-- and 7'----1-- from group (6 0 12'010000000000).
  Merging pattern 7'----1-- and 7'----0-- from group (6 0 12'010000000000).
  Removing unused input signal $auto$opt_reduce.cc:134:opt_mux$1005.

8.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 71 unused cells and 72 unused wires.
<suppressed ~73 debug messages>

8.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\byte_controller.bit_controller.slave_state$1008' from module `\i2c_master_top'.
  Removing unused output signal $flatten\byte_controller.\bit_controller.$0\slave_state[4:0] [0].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$0\slave_state[4:0] [1].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$0\slave_state[4:0] [2].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$0\slave_state[4:0] [3].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$0\slave_state[4:0] [4].
  Removing unused output signal $flatten\byte_controller.\bit_controller.$procmux$700_CMP.
  Removing unused output signal $flatten\byte_controller.\bit_controller.$procmux$701_CMP.
  Removing unused output signal $flatten\byte_controller.\bit_controller.$procmux$702_CMP.
Optimizing FSM `$fsm$\byte_controller.c_state$1017' from module `\i2c_master_top'.
  Removing unused output signal $flatten\byte_controller.$0\c_state[9:0] [0].
  Removing unused output signal $flatten\byte_controller.$0\c_state[9:0] [1].
  Removing unused output signal $flatten\byte_controller.$0\c_state[9:0] [2].
  Removing unused output signal $flatten\byte_controller.$0\c_state[9:0] [3].
  Removing unused output signal $flatten\byte_controller.$0\c_state[9:0] [4].
  Removing unused output signal $flatten\byte_controller.$0\c_state[9:0] [5].
  Removing unused output signal $flatten\byte_controller.$0\c_state[9:0] [6].
  Removing unused output signal $flatten\byte_controller.$0\c_state[9:0] [7].
  Removing unused output signal $flatten\byte_controller.$0\c_state[9:0] [8].
  Removing unused output signal $flatten\byte_controller.$0\c_state[9:0] [9].
Optimizing FSM `$fsm$\byte_controller.core_cmd$1030' from module `\i2c_master_top'.
  Removing unused output signal $flatten\byte_controller.$0\core_cmd[3:0] [0].
  Removing unused output signal $flatten\byte_controller.$0\core_cmd[3:0] [1].
  Removing unused output signal $flatten\byte_controller.$0\core_cmd[3:0] [2].
  Removing unused output signal $flatten\byte_controller.$0\core_cmd[3:0] [3].

8.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\byte_controller.bit_controller.slave_state$1008' from module `\i2c_master_top' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  00000 -> ------1
  10000 -> -----1-
  01000 -> ----1--
  00100 -> ---1---
  00010 -> --1----
  00001 -> -1-----
  10001 -> 1------
Recoding FSM `$fsm$\byte_controller.c_state$1017' from module `\i2c_master_top' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  0000000000 -> ----------1
  1000000000 -> ---------1-
  0100000000 -> --------1--
  0010000000 -> -------1---
  0001000000 -> ------1----
  0000100000 -> -----1-----
  0000010000 -> ----1------
  0000001000 -> ---1-------
  0000000100 -> --1--------
  0000000010 -> -1---------
  0000000001 -> 1----------
Recoding FSM `$fsm$\byte_controller.core_cmd$1030' from module `\i2c_master_top' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  0000 -> ----1
  1000 -> ---1-
  0100 -> --1--
  0010 -> -1---
  0001 -> 1----

8.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\byte_controller.bit_controller.slave_state$1008' from module `i2c_master_top':
-------------------------------------

  Information on FSM $fsm$\byte_controller.bit_controller.slave_state$1008 (\byte_controller.bit_controller.slave_state):

  Number of input signals:    6
  Number of output signals:   4
  Number of state bits:       7

  Input signals:
    0: $flatten\byte_controller.\bit_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:209$12_Y
    1: $flatten\byte_controller.\bit_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:365$77_Y
    2: $flatten\byte_controller.\bit_controller.$logic_or$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:643$99_Y
    3: $flatten\byte_controller.\bit_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:682$102_Y
    4: $flatten\byte_controller.\bit_controller.$procmux$689_CMP
    5: $flatten\byte_controller.\bit_controller.$procmux$711_CMP

  Output signals:
    0: $flatten\byte_controller.\bit_controller.$procmux$670_CMP
    1: $flatten\byte_controller.\bit_controller.$procmux$673_CMP
    2: $flatten\byte_controller.\bit_controller.$procmux$685_CMP
    3: $flatten\byte_controller.\bit_controller.$procmux$690_CMP

  State encoding:
    0:  7'------1  <RESET STATE>
    1:  7'-----1-
    2:  7'----1--
    3:  7'---1---
    4:  7'--1----
    5:  7'-1-----
    6:  7'1------

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 6'00-0--   ->     0 4'1000
      1:     0 6'---1--   ->     0 4'1000
      2:     0 6'1--0--   ->     3 4'1000
      3:     0 6'-1-0--   ->     5 4'1000
      4:     1 6'---1--   ->     0 4'0000
      5:     1 6'---0--   ->     6 4'0000
      6:     2 6'---1--   ->     0 4'0001
      7:     2 6'---0-1   ->     1 4'0001
      8:     2 6'---0-0   ->     2 4'0001
      9:     3 6'---1--   ->     0 4'0000
     10:     3 6'---01-   ->     2 4'0000
     11:     3 6'---00-   ->     3 4'0000
     12:     4 6'---1--   ->     0 4'0010
     13:     4 6'---0-1   ->     1 4'0010
     14:     4 6'---0-0   ->     4 4'0010
     15:     5 6'---1--   ->     0 4'0100
     16:     5 6'--10--   ->     4 4'0100
     17:     5 6'--00--   ->     5 4'0100
     18:     6 6'------   ->     0 4'0000

-------------------------------------

FSM `$fsm$\byte_controller.c_state$1017' from module `i2c_master_top':
-------------------------------------

  Information on FSM $fsm$\byte_controller.c_state$1017 (\byte_controller.c_state):

  Number of input signals:   13
  Number of output signals:  11
  Number of state bits:      11

  Input signals:
    0: \cr [1]
    1: \cr [4]
    2: \cr [5]
    3: \cr [6]
    4: \cr [7]
    5: \byte_controller.bit_controller.cmd_slave_ack
    6: \byte_controller.bit_controller.slave_adr [0]
    7: \byte_controller.bit_controller.dout
    8: \byte_controller.bit_controller.cmd_ack
    9: $flatten\byte_controller.$logic_and$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:305$132_Y
   10: $flatten\byte_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:295$130_Y
   11: $flatten\byte_controller.$or$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:263$127_Y
   12: $flatten\byte_controller.$reduce_or$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:235$122_Y

  Output signals:
    0: $flatten\byte_controller.$procmux$541_CMP
    1: $flatten\byte_controller.$procmux$350_CMP
    2: $flatten\byte_controller.$procmux$344_CMP
    3: $flatten\byte_controller.$procmux$341_CMP
    4: $flatten\byte_controller.$procmux$335_CMP
    5: $flatten\byte_controller.$procmux$326_CMP
    6: $flatten\byte_controller.$procmux$320_CMP
    7: $flatten\byte_controller.$procmux$317_CMP
    8: $flatten\byte_controller.$procmux$306_CMP
    9: $flatten\byte_controller.$procmux$299_CMP
   10: $flatten\byte_controller.$procmux$289_CMP

  State encoding:
    0: 11'----------1  <RESET STATE>
    1: 11'---------1-
    2: 11'--------1--
    3: 11'-------1---
    4: 11'------1----
    5: 11'-----1-----
    6: 11'----1------
    7: 11'---1-------
    8: 11'--1--------
    9: 11'-1---------
   10: 11'1----------

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 13'-000---------   ->     0 11'00000100000
      1:     0 13'-1-----------   ->     0 11'00000100000
      2:     0 13'-01----------   ->     5 11'00000100000
      3:     0 13'-001----0-00-   ->     6 11'00000100000
      4:     0 13'-001----0-01-   ->     8 11'00000100000
      5:     0 13'-001----0-1--   ->     9 11'00000100000
      6:     0 13'-001----1----   ->    10 11'00000100000
      7:     1 13'-1-----------   ->     0 11'00000000001
      8:     1 13'-0----0------   ->     3 11'00000000001
      9:     1 13'-0----1------   ->     4 11'00000000001
     10:     2 13'-1-----------   ->     0 11'00001000000
     11:     2 13'-0----------1   ->     1 11'00001000000
     12:     2 13'-0----------0   ->     2 11'00001000000
     13:     3 13'-1-----------   ->     0 11'00000000100
     14:     3 13'-0-----0-----   ->     3 11'00000000100
     15:     3 13'10-----1-----   ->     3 11'00000000100
     16:     3 13'00-----1-----   ->     5 11'00000000100
     17:     4 13'-1-----------   ->     0 11'00000000010
     18:     4 13'-0-----0-----   ->     4 11'00000000010
     19:     4 13'10-----1-----   ->     4 11'00000000010
     20:     4 13'00-----1-----   ->     5 11'00000000010
     21:     5 13'-0---1-1-----   ->     0 11'10000000000
     22:     5 13'-1-----------   ->     0 11'10000000000
     23:     5 13'-0---0-1-----   ->     2 11'10000000000
     24:     5 13'-0-----0-----   ->     5 11'10000000000
     25:     6 13'-0--1--------   ->     0 11'01000000000
     26:     6 13'-1-----------   ->     0 11'01000000000
     27:     6 13'-0--0--------   ->     6 11'01000000000
     28:     7 13'-0--1----0---   ->     0 11'00100000000
     29:     7 13'-1-----------   ->     0 11'00100000000
     30:     7 13'-0--1----1---   ->     6 11'00100000000
     31:     7 13'-0--0--------   ->     7 11'00100000000
     32:     8 13'-1-----------   ->     0 11'00000001000
     33:     8 13'00--1--------   ->     7 11'00000001000
     34:     8 13'-0--0--------   ->     8 11'00000001000
     35:     8 13'10--1--------   ->     8 11'00000001000
     36:     9 13'-1-----------   ->     0 11'00000010000
     37:     9 13'00--1--------   ->     7 11'00000010000
     38:     9 13'-0--0--------   ->     9 11'00000010000
     39:     9 13'10--1--------   ->     9 11'00000010000
     40:    10 13'-1-----------   ->     0 11'00010000000
     41:    10 13'-0--1-----0--   ->     8 11'00010000000
     42:    10 13'-0--1-----1--   ->     9 11'00010000000
     43:    10 13'-0--0--------   ->    10 11'00010000000

-------------------------------------

FSM `$fsm$\byte_controller.core_cmd$1030' from module `i2c_master_top':
-------------------------------------

  Information on FSM $fsm$\byte_controller.core_cmd$1030 (\byte_controller.core_cmd):

  Number of input signals:   15
  Number of output signals:   4
  Number of state bits:       5

  Input signals:
    0: \cr [4]
    1: \cr [5]
    2: \cr [6]
    3: \cr [7]
    4: \byte_controller.bit_controller.cmd_ack
    5: $flatten\byte_controller.$procmux$341_CMP
    6: $flatten\byte_controller.$procmux$335_CMP
    7: $flatten\byte_controller.$procmux$326_CMP
    8: $flatten\byte_controller.$procmux$317_CMP
    9: $flatten\byte_controller.$procmux$306_CMP
   10: $flatten\byte_controller.$procmux$299_CMP
   11: $flatten\byte_controller.$logic_and$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:305$132_Y
   12: $flatten\byte_controller.$and$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:295$130_Y
   13: $flatten\byte_controller.$or$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:263$127_Y
   14: $flatten\byte_controller.$reduce_or$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:235$122_Y

  Output signals:
    0: $flatten\byte_controller.\bit_controller.$eq$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:352$64_Y
    1: $flatten\byte_controller.\bit_controller.$procmux$823_CMP
    2: $flatten\byte_controller.\bit_controller.$procmux$824_CMP
    3: $flatten\byte_controller.\bit_controller.$procmux$826_CMP

  State encoding:
    0:    5'----1  <RESET STATE>
    1:    5'---1-
    2:    5'--1--
    3:    5'-1---
    4:    5'1----

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 15'-0---1----1-0--   ->     0 4'0000
      1:     0 15'-0-------10----   ->     0 4'0000
      2:     0 15'-0------1-0----   ->     0 4'0000
      3:     0 15'-0----1---0----   ->     0 4'0000
      4:     0 15'-0---1----0----   ->     0 4'0000
      5:     0 15'-0--000000-----   ->     0 4'0000
      6:     0 15'-000---1-------   ->     0 4'0000
      7:     0 15'-01----1-------   ->     0 4'0000
      8:     0 15'-0--1----------   ->     0 4'0000
      9:     0 15'-1-------------   ->     0 4'0000
     10:     0 15'-001---1---0-1-   ->     1 4'0000
     11:     0 15'-0----1---1--1-   ->     1 4'0000
     12:     0 15'00-------11----   ->     1 4'0000
     13:     0 15'10------1-1----   ->     1 4'0000
     14:     0 15'-001---1---0-01   ->     2 4'0000
     15:     0 15'-0----1---1--0-   ->     2 4'0000
     16:     0 15'10-------11----   ->     2 4'0000
     17:     0 15'00------1-1----   ->     2 4'0000
     18:     0 15'-001---1---0-00   ->     3 4'0000
     19:     0 15'-0---1----1-1--   ->     3 4'0000
     20:     0 15'-001---1---1---   ->     4 4'0000
     21:     1 15'-0---1----1-0--   ->     0 4'0010
     22:     1 15'-0--1-----1----   ->     0 4'0010
     23:     1 15'-1-------------   ->     0 4'0010
     24:     1 15'-001---1---0-1-   ->     1 4'0010
     25:     1 15'-0----1---1--1-   ->     1 4'0010
     26:     1 15'-0-------10----   ->     1 4'0010
     27:     1 15'-0------1-0----   ->     1 4'0010
     28:     1 15'-0----1---0----   ->     1 4'0010
     29:     1 15'-0---1----0----   ->     1 4'0010
     30:     1 15'-0--1-----0----   ->     1 4'0010
     31:     1 15'00-------11----   ->     1 4'0010
     32:     1 15'10------1-1----   ->     1 4'0010
     33:     1 15'-0--000000-----   ->     1 4'0010
     34:     1 15'-000---1-------   ->     1 4'0010
     35:     1 15'-01----1-------   ->     1 4'0010
     36:     1 15'-001---1---0-01   ->     2 4'0010
     37:     1 15'-0----1---1--0-   ->     2 4'0010
     38:     1 15'10-------11----   ->     2 4'0010
     39:     1 15'00------1-1----   ->     2 4'0010
     40:     1 15'-001---1---0-00   ->     3 4'0010
     41:     1 15'-0---1----1-1--   ->     3 4'0010
     42:     1 15'-001---1---1---   ->     4 4'0010
     43:     2 15'-0---1----1-0--   ->     0 4'0100
     44:     2 15'-0--1-----1----   ->     0 4'0100
     45:     2 15'-1-------------   ->     0 4'0100
     46:     2 15'-001---1---0-1-   ->     1 4'0100
     47:     2 15'-0----1---1--1-   ->     1 4'0100
     48:     2 15'00-------11----   ->     1 4'0100
     49:     2 15'10------1-1----   ->     1 4'0100
     50:     2 15'-001---1---0-01   ->     2 4'0100
     51:     2 15'-0----1---1--0-   ->     2 4'0100
     52:     2 15'-0-------10----   ->     2 4'0100
     53:     2 15'-0------1-0----   ->     2 4'0100
     54:     2 15'-0----1---0----   ->     2 4'0100
     55:     2 15'-0---1----0----   ->     2 4'0100
     56:     2 15'-0--1-----0----   ->     2 4'0100
     57:     2 15'10-------11----   ->     2 4'0100
     58:     2 15'00------1-1----   ->     2 4'0100
     59:     2 15'-0--000000-----   ->     2 4'0100
     60:     2 15'-000---1-------   ->     2 4'0100
     61:     2 15'-01----1-------   ->     2 4'0100
     62:     2 15'-001---1---0-00   ->     3 4'0100
     63:     2 15'-0---1----1-1--   ->     3 4'0100
     64:     2 15'-001---1---1---   ->     4 4'0100
     65:     3 15'-0---1----1-0--   ->     0 4'0001
     66:     3 15'-0--1-----1----   ->     0 4'0001
     67:     3 15'-1-------------   ->     0 4'0001
     68:     3 15'-001---1---0-1-   ->     1 4'0001
     69:     3 15'-0----1---1--1-   ->     1 4'0001
     70:     3 15'00-------11----   ->     1 4'0001
     71:     3 15'10------1-1----   ->     1 4'0001
     72:     3 15'-001---1---0-01   ->     2 4'0001
     73:     3 15'-0----1---1--0-   ->     2 4'0001
     74:     3 15'10-------11----   ->     2 4'0001
     75:     3 15'00------1-1----   ->     2 4'0001
     76:     3 15'-001---1---0-00   ->     3 4'0001
     77:     3 15'-0---1----1-1--   ->     3 4'0001
     78:     3 15'-0-------10----   ->     3 4'0001
     79:     3 15'-0------1-0----   ->     3 4'0001
     80:     3 15'-0----1---0----   ->     3 4'0001
     81:     3 15'-0---1----0----   ->     3 4'0001
     82:     3 15'-0--1-----0----   ->     3 4'0001
     83:     3 15'-0--000000-----   ->     3 4'0001
     84:     3 15'-000---1-------   ->     3 4'0001
     85:     3 15'-01----1-------   ->     3 4'0001
     86:     3 15'-001---1---1---   ->     4 4'0001
     87:     4 15'-0---1----1-0--   ->     0 4'1000
     88:     4 15'-0--1-----1----   ->     0 4'1000
     89:     4 15'-1-------------   ->     0 4'1000
     90:     4 15'-001---1---0-1-   ->     1 4'1000
     91:     4 15'-0----1---1--1-   ->     1 4'1000
     92:     4 15'00-------11----   ->     1 4'1000
     93:     4 15'10------1-1----   ->     1 4'1000
     94:     4 15'-001---1---0-01   ->     2 4'1000
     95:     4 15'-0----1---1--0-   ->     2 4'1000
     96:     4 15'10-------11----   ->     2 4'1000
     97:     4 15'00------1-1----   ->     2 4'1000
     98:     4 15'-001---1---0-00   ->     3 4'1000
     99:     4 15'-0---1----1-1--   ->     3 4'1000
    100:     4 15'-001---1---1---   ->     4 4'1000
    101:     4 15'-0-------10----   ->     4 4'1000
    102:     4 15'-0------1-0----   ->     4 4'1000
    103:     4 15'-0----1---0----   ->     4 4'1000
    104:     4 15'-0---1----0----   ->     4 4'1000
    105:     4 15'-0--1-----0----   ->     4 4'1000
    106:     4 15'-0--000000-----   ->     4 4'1000
    107:     4 15'-000---1-------   ->     4 4'1000
    108:     4 15'-01----1-------   ->     4 4'1000

-------------------------------------

8.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\byte_controller.bit_controller.slave_state$1008' from module `\i2c_master_top'.
Mapping FSM `$fsm$\byte_controller.c_state$1017' from module `\i2c_master_top'.
Mapping FSM `$fsm$\byte_controller.core_cmd$1030' from module `\i2c_master_top'.

8.9. Executing OPT pass (performing simple optimizations).

8.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.
<suppressed ~25 debug messages>

8.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
<suppressed ~123 debug messages>
Removed a total of 41 cells.

8.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~66 debug messages>

8.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

8.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

8.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$931 ($adff) from module i2c_master_top (D = $0\sladr[6:0], Q = \sladr).
Adding EN signal on $procdff$930 ($adff) from module i2c_master_top (D = $0\txr[7:0], Q = \txr).
Adding EN signal on $procdff$929 ($adff) from module i2c_master_top (D = $0\ctr[7:0], Q = \ctr).
Adding EN signal on $procdff$928 ($adff) from module i2c_master_top (D = $0\prer[15:0] [15:8], Q = \prer [15:8]).
Adding EN signal on $procdff$928 ($adff) from module i2c_master_top (D = $0\prer[15:0] [7:0], Q = \prer [7:0]).
Adding EN signal on $procdff$927 ($adff) from module i2c_master_top (D = $0\cr[7:0] [3], Q = \cr [3]).
Adding EN signal on $procdff$927 ($adff) from module i2c_master_top (D = $0\cr[7:0] [7:4], Q = \cr [7:4]).
Adding EN signal on $procdff$927 ($adff) from module i2c_master_top (D = $0\cr[7:0] [2:0], Q = \cr [2:0]).
Adding EN signal on $procdff$926 ($adff) from module i2c_master_top (D = $0\slave_mode[0:0], Q = \slave_mode).
Adding EN signal on $flatten\byte_controller.\bit_controller.$procdff$981 ($adff) from module i2c_master_top (D = $flatten\byte_controller.\bit_controller.$0\cnt[15:0], Q = \byte_controller.bit_controller.cnt).
Adding EN signal on $flatten\byte_controller.\bit_controller.$procdff$976 ($adff) from module i2c_master_top (D = $flatten\byte_controller.\bit_controller.$0\fSDA[2:0], Q = \byte_controller.bit_controller.fSDA).
Adding EN signal on $flatten\byte_controller.\bit_controller.$procdff$975 ($adff) from module i2c_master_top (D = $flatten\byte_controller.\bit_controller.$0\fSCL[2:0], Q = \byte_controller.bit_controller.fSCL).
Adding EN signal on $flatten\byte_controller.\bit_controller.$procdff$967 ($adff) from module i2c_master_top (D = $flatten\byte_controller.\bit_controller.$0\cmd_stop[0:0], Q = \byte_controller.bit_controller.cmd_stop).
Adding EN signal on $flatten\byte_controller.\bit_controller.$procdff$965 ($dff) from module i2c_master_top (D = \byte_controller.bit_controller.sSDA, Q = \byte_controller.bit_controller.dout).
Adding EN signal on $flatten\byte_controller.\bit_controller.$procdff$964 ($adff) from module i2c_master_top (D = $flatten\byte_controller.\bit_controller.$0\sda_oen_master[0:0], Q = \byte_controller.bit_controller.sda_oen_master).
Adding EN signal on $flatten\byte_controller.\bit_controller.$procdff$963 ($adff) from module i2c_master_top (D = $flatten\byte_controller.\bit_controller.$0\scl_oen_master[0:0], Q = \byte_controller.bit_controller.scl_oen_master).
Adding EN signal on $flatten\byte_controller.\bit_controller.$procdff$962 ($adff) from module i2c_master_top (D = $flatten\byte_controller.\bit_controller.$0\c_state[17:0], Q = \byte_controller.bit_controller.c_state).
Adding EN signal on $flatten\byte_controller.\bit_controller.$procdff$961 ($adff) from module i2c_master_top (D = $flatten\byte_controller.\bit_controller.$0\sda_chk[0:0], Q = \byte_controller.bit_controller.sda_chk).
Adding EN signal on $flatten\byte_controller.\bit_controller.$procdff$959 ($adff) from module i2c_master_top (D = $flatten\byte_controller.\bit_controller.$0\slave_act[0:0], Q = \byte_controller.bit_controller.slave_act).
Adding EN signal on $flatten\byte_controller.\bit_controller.$procdff$958 ($adff) from module i2c_master_top (D = $flatten\byte_controller.\bit_controller.$0\slave_cnt[3:0], Q = \byte_controller.bit_controller.slave_cnt).
Adding EN signal on $flatten\byte_controller.\bit_controller.$procdff$957 ($adff) from module i2c_master_top (D = $flatten\byte_controller.\bit_controller.$0\slave_adr[7:0], Q = \byte_controller.bit_controller.slave_adr).
Adding EN signal on $flatten\byte_controller.\bit_controller.$procdff$954 ($adff) from module i2c_master_top (D = $flatten\byte_controller.\bit_controller.$0\sda_oen_slave[0:0], Q = \byte_controller.bit_controller.sda_oen_slave).
Adding EN signal on $flatten\byte_controller.$procdff$950 ($adff) from module i2c_master_top (D = $flatten\byte_controller.$0\sr[7:0], Q = \byte_controller.sr).
Adding EN signal on $flatten\byte_controller.$procdff$949 ($adff) from module i2c_master_top (D = $flatten\byte_controller.$0\dcnt[2:0], Q = \byte_controller.dcnt).
Adding EN signal on $flatten\byte_controller.$procdff$942 ($adff) from module i2c_master_top (D = $flatten\byte_controller.$0\slave_dat_avail[0:0], Q = \byte_controller.slave_dat_avail).
Adding EN signal on $flatten\byte_controller.$procdff$941 ($adff) from module i2c_master_top (D = $flatten\byte_controller.$0\slave_dat_req[0:0], Q = \byte_controller.slave_dat_req).
Adding EN signal on $flatten\byte_controller.$procdff$940 ($adff) from module i2c_master_top (D = $flatten\byte_controller.$0\ack_out[0:0], Q = \byte_controller.ack_out).
Adding EN signal on $flatten\byte_controller.$procdff$939 ($adff) from module i2c_master_top (D = $flatten\byte_controller.$0\slave_act[0:0], Q = \byte_controller.slave_act).
Adding EN signal on $flatten\byte_controller.$procdff$937 ($adff) from module i2c_master_top (D = $flatten\byte_controller.$0\sl_wait[0:0], Q = \byte_controller.sl_wait).
Adding EN signal on $flatten\byte_controller.$procdff$936 ($adff) from module i2c_master_top (D = $flatten\byte_controller.$0\slave_cmd[1:0], Q = \byte_controller.slave_cmd).
Adding EN signal on $flatten\byte_controller.$procdff$935 ($adff) from module i2c_master_top (D = $flatten\byte_controller.$0\master_mode[0:0], Q = \byte_controller.master_mode).

8.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 1 unused cells and 76 unused wires.
<suppressed ~2 debug messages>

8.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.
<suppressed ~26 debug messages>

8.9.9. Rerunning OPT passes. (Maybe there is more to do..)

8.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

8.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$755: { $auto$opt_reduce.cc:134:opt_mux$993 $auto$opt_reduce.cc:134:opt_mux$991 $auto$opt_reduce.cc:134:opt_mux$989 }
    New ctrl vector for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$779: { $auto$opt_reduce.cc:134:opt_mux$997 $auto$opt_reduce.cc:134:opt_mux$995 }
  Optimizing cells in module \i2c_master_top.
Performed a total of 2 changes.

8.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
<suppressed ~57 debug messages>
Removed a total of 19 cells.

8.9.13. Executing OPT_DFF pass (perform DFF optimizations).

8.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 19 unused wires.
<suppressed ~1 debug messages>

8.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

8.9.16. Rerunning OPT passes. (Maybe there is more to do..)

8.9.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~66 debug messages>

8.9.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

8.9.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

8.9.20. Executing OPT_DFF pass (perform DFF optimizations).

8.9.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

8.9.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

8.9.23. Finished OPT passes. (There is nothing left to do.)

8.10. Executing WREDUCE pass (reducing word size of cells).
Removed cell i2c_master_top.$procmux$179 ($mux).
Removed cell i2c_master_top.$procmux$184 ($mux).
Removed cell i2c_master_top.$procmux$187 ($mux).
Removed cell i2c_master_top.$procmux$195 ($mux).
Removed cell i2c_master_top.$procmux$197 ($mux).
Removed cell i2c_master_top.$procmux$203 ($mux).
Removed cell i2c_master_top.$procmux$211 ($mux).
Removed cell i2c_master_top.$procmux$219 ($mux).
Removed top 2 bits (of 3) from port B of cell i2c_master_top.$procmux$230_CMP0 ($eq).
Removed cell i2c_master_top.$procmux$229 ($mux).
Removed cell i2c_master_top.$procmux$231 ($mux).
Removed cell i2c_master_top.$procmux$240 ($mux).
Removed cell i2c_master_top.$procmux$242 ($mux).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$procmux$249_CMP0 ($eq).
Removed cell i2c_master_top.$procmux$248 ($mux).
Removed cell i2c_master_top.$procmux$250 ($mux).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$procmux$258_CMP0 ($eq).
Removed cell i2c_master_top.$procmux$257 ($mux).
Removed cell i2c_master_top.$procmux$259 ($mux).
Removed cell i2c_master_top.$procmux$264 ($mux).
Removed cell i2c_master_top.$procmux$266 ($mux).
Removed top 1 bits (of 2) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1274 ($eq).
Removed top 2 bits (of 6) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1195 ($eq).
Removed top 2 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1188 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1199 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1102 ($eq).
Removed top 2 bits (of 5) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1212 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1216 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1444 ($ne).
Removed top 2 bits (of 4) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1229 ($eq).
Removed top 1 bits (of 4) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1242 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1260 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1451 ($ne).
Removed top 3 bits (of 4) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1603 ($ne).
Removed top 2 bits (of 5) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1599 ($ne).
Removed top 2 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1594 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1579 ($ne).
Removed top 1 bits (of 5) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1568 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1098 ($eq).
Removed top 1 bits (of 4) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1557 ($ne).
Removed top 1 bits (of 5) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1555 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1553 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1551 ($ne).
Removed top 1 bits (of 2) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1106 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1505 ($ne).
Removed top 1 bits (of 2) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1048 ($eq).
Removed top 1 bits (of 2) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1490 ($ne).
Removed top 3 bits (of 4) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1426 ($eq).
Removed top 1 bits (of 2) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1058 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1418 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1414 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1410 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1406 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1402 ($eq).
Removed top 2 bits (of 5) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1400 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1395 ($eq).
Removed top 15 bits (of 16) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:231$22 ($sub).
Removed top 31 bits (of 32) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:263$32 ($sub).
Removed top 18 bits (of 32) from port Y of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:263$32 ($sub).
Removed top 31 bits (of 32) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:606$90 ($sub).
Removed top 28 bits (of 32) from port Y of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:606$90 ($sub).
Removed top 2 bits (of 4) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1348 ($eq).
Removed top 1 bits (of 4) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1283 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1175 ($eq).
Removed cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$682 ($mux).
Removed top 1 bits (of 2) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$689_CMP0 ($eq).
Removed cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$688 ($mux).
Removed top 2 bits (of 6) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1171 ($eq).
Removed top 1 bits (of 2) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1166 ($eq).
Removed cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$726 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$729 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$736 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$741 ($mux).
Removed top 1 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$746_CMP0 ($eq).
Removed top 5 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$747_CMP0 ($eq).
Removed top 9 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$748_CMP0 ($eq).
Removed top 13 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$749_CMP0 ($eq).
Removed top 2 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$757_CMP0 ($eq).
Removed top 3 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$758_CMP0 ($eq).
Removed top 4 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$759_CMP0 ($eq).
Removed top 6 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$761_CMP0 ($eq).
Removed top 7 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$762_CMP0 ($eq).
Removed top 8 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$763_CMP0 ($eq).
Removed top 10 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$765_CMP0 ($eq).
Removed top 11 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$766_CMP0 ($eq).
Removed top 12 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$767_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1465 ($ne).
Removed top 14 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$769_CMP0 ($eq).
Removed top 15 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$770_CMP0 ($eq).
Removed top 16 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$771_CMP0 ($eq).
Removed top 17 bits (of 18) from port B of cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$772_CMP0 ($eq).
Removed cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$774 ($mux).
Removed top 1 bits (of 4) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1324 ($eq).
Removed top 2 bits (of 7) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1322 ($eq).
Removed cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$798 ($mux).
Removed top 2 bits (of 4) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1305 ($eq).
Removed top 4 bits (of 18) from mux cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$822 ($pmux).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1458 ($ne).
Removed cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$828 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$852 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$862 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$888 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$893 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$916 ($mux).
Removed top 2 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1160 ($eq).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$650 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$642 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$637 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$632 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$630 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$613 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$584 ($mux).
Removed top 2 bits (of 7) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1363 ($eq).
Removed top 1 bits (of 2) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1151 ($eq).
Removed top 1 bits (of 4) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1365 ($eq).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1472 ($ne).
Removed top 1 bits (of 3) from port B of cell i2c_master_top.$auto$opt_dff.cc:218:make_patterns_logic$1437 ($ne).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$497 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$478 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$473 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$461 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$459 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$457 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$443 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$439 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$437 ($mux).
Removed cell i2c_master_top.$flatten\byte_controller.$procmux$435 ($mux).
Removed top 2 bits (of 3) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1125 ($eq).
Removed top 1 bits (of 2) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1117 ($eq).
Removed top 2 bits (of 6) from port B of cell i2c_master_top.$auto$fsm_map.cc:77:implement_pattern_cache$1281 ($eq).
Removed top 2 bits (of 3) from port B of cell i2c_master_top.$flatten\byte_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:233$121 ($sub).
Removed top 4 bits (of 18) from wire i2c_master_top.$flatten\byte_controller.\bit_controller.$procmux$822_Y.
Removed top 18 bits (of 32) from wire i2c_master_top.$flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:263$32_Y.

8.11. Executing PEEPOPT pass (run peephole optimizers).

8.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 51 unused wires.
<suppressed ~1 debug messages>

8.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module i2c_master_top:
  creating $macc model for $flatten\byte_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:233$121 ($sub).
  creating $macc model for $flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:231$22 ($sub).
  creating $macc model for $flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:263$32 ($sub).
  creating $macc model for $flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:606$90 ($sub).
  creating $alu model for $macc $flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:606$90.
  creating $alu model for $macc $flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:263$32.
  creating $alu model for $macc $flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:231$22.
  creating $alu model for $macc $flatten\byte_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:233$121.
  creating $alu cell for $flatten\byte_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_byte_ctrl.v:233$121: $auto$alumacc.cc:485:replace_alu$1609
  creating $alu cell for $flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:231$22: $auto$alumacc.cc:485:replace_alu$1612
  creating $alu cell for $flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:263$32: $auto$alumacc.cc:485:replace_alu$1615
  creating $alu cell for $flatten\byte_controller.\bit_controller.$sub$/openLANE_flow/designs/i2c/src/i2c_master_bit_ctrl.v:606$90: $auto$alumacc.cc:485:replace_alu$1618
  created 4 $alu and 0 $macc cells.

8.14. Executing SHARE pass (SAT-based resource sharing).

8.15. Executing OPT pass (performing simple optimizations).

8.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

8.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

8.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

8.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
    New ctrl vector for $pmux cell $flatten\byte_controller.$procmux$475: $auto$opt_reduce.cc:134:opt_mux$1622
  Optimizing cells in module \i2c_master_top.
Performed a total of 1 changes.

8.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

8.15.6. Executing OPT_DFF pass (perform DFF optimizations).

8.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

8.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

8.15.9. Rerunning OPT passes. (Maybe there is more to do..)

8.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~62 debug messages>

8.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

8.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

8.15.13. Executing OPT_DFF pass (perform DFF optimizations).

8.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

8.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

8.15.16. Finished OPT passes. (There is nothing left to do.)

8.16. Executing MEMORY pass.

8.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

8.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

8.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

8.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

8.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

8.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

8.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

8.18. Executing OPT pass (performing simple optimizations).

8.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.
<suppressed ~46 debug messages>

8.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

8.18.3. Executing OPT_DFF pass (perform DFF optimizations).

8.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 3 unused cells and 16 unused wires.
<suppressed ~4 debug messages>

8.18.5. Finished fast OPT passes.

8.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

8.20. Executing OPT pass (performing simple optimizations).

8.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

8.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

8.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~52 debug messages>

8.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
    Consolidated identical input bits for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$803:
      Old ports: A={ 4'0000 $auto$wreduce.cc:454:run$1607 [13:0] }, B=252'000000000000000010000000000000000100000000000000001000000000000000010000000000000001000000000000000010000000000000000100000000000000010000000000000000100000000000000001000000000000000100000000000000001000000000000000010000000000000000000000000000000000, Y=$flatten\byte_controller.\bit_controller.$procmux$803_Y
      New ports: A={ 3'000 $auto$wreduce.cc:454:run$1607 [13:0] }, B=238'0000000000000001000000000000000100000000000000010000000000000001000000000000001000000000000000100000000000000010000000000000010000000000000001000000000000000100000000000000100000000000000010000000000000001000000000000000000000000000000000, Y=$flatten\byte_controller.\bit_controller.$procmux$803_Y [16:0]
      New connections: $flatten\byte_controller.\bit_controller.$procmux$803_Y [17] = 1'0
    Consolidated identical input bits for $pmux cell $flatten\byte_controller.\bit_controller.$procmux$822:
      Old ports: A=14'00000000000000, B=56'00000000000001000000001000001000000000000000001000000000, Y=$auto$wreduce.cc:454:run$1607 [13:0]
      New ports: A=4'0000, B=16'0001001010000100, Y={ $auto$wreduce.cc:454:run$1607 [13] $auto$wreduce.cc:454:run$1607 [9] $auto$wreduce.cc:454:run$1607 [5] $auto$wreduce.cc:454:run$1607 [0] }
      New connections: { $auto$wreduce.cc:454:run$1607 [12:10] $auto$wreduce.cc:454:run$1607 [8:6] $auto$wreduce.cc:454:run$1607 [4:1] } = 10'0000000000
  Optimizing cells in module \i2c_master_top.
    Consolidated identical input bits for $mux cell $flatten\byte_controller.\bit_controller.$procmux$831:
      Old ports: A=$flatten\byte_controller.\bit_controller.$procmux$803_Y, B=18'000000000000000000, Y=$flatten\byte_controller.\bit_controller.$0\c_state[17:0]
      New ports: A=$flatten\byte_controller.\bit_controller.$procmux$803_Y [16:0], B=17'00000000000000000, Y=$flatten\byte_controller.\bit_controller.$0\c_state[17:0] [16:0]
      New connections: $flatten\byte_controller.\bit_controller.$0\c_state[17:0] [17] = 1'0
  Optimizing cells in module \i2c_master_top.
Performed a total of 3 changes.

8.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

8.20.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $flatten\byte_controller.$procmux$334 in front of them:
        $flatten\byte_controller.$procmux$339
        $flatten\byte_controller.$procmux$348

8.20.7. Executing OPT_DFF pass (perform DFF optimizations).

8.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

8.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.
<suppressed ~1 debug messages>

8.20.10. Rerunning OPT passes. (Maybe there is more to do..)

8.20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~53 debug messages>

8.20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
    New ctrl vector for $pmux cell $flatten\byte_controller.$procmux$334: { \byte_controller.c_state [3] $auto$opt_reduce.cc:134:opt_mux$1627 \byte_controller.c_state [9] }
  Optimizing cells in module \i2c_master_top.
Performed a total of 1 changes.

8.20.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

8.20.14. Executing OPT_SHARE pass.

8.20.15. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 17 on $auto$opt_dff.cc:764:run$1518 ($adffe) from module i2c_master_top.

8.20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

8.20.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.
<suppressed ~2 debug messages>

8.20.18. Rerunning OPT passes. (Maybe there is more to do..)

8.20.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~53 debug messages>

8.20.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

8.20.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

8.20.22. Executing OPT_SHARE pass.

8.20.23. Executing OPT_DFF pass (perform DFF optimizations).

8.20.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

8.20.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

8.20.26. Finished OPT passes. (There is nothing left to do.)

8.21. Executing TECHMAP pass (map to technology primitives).

8.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

8.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=7 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=14\B_WIDTH=1\Y_WIDTH=14 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=17\S_WIDTH=14 for cells of type $pmux.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=1\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=14 for cells of type $lcu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=3 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=4 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=16 for cells of type $lcu.
No more expansions possible.
<suppressed ~1403 debug messages>

8.22. Executing OPT pass (performing simple optimizations).

8.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.
<suppressed ~1204 debug messages>

8.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
<suppressed ~1113 debug messages>
Removed a total of 371 cells.

8.22.3. Executing OPT_DFF pass (perform DFF optimizations).

8.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 49 unused cells and 854 unused wires.
<suppressed ~50 debug messages>

8.22.5. Finished fast OPT passes.

8.23. Executing ABC pass (technology mapping using ABC).

8.23.1. Extracting gate netlist of module `\i2c_master_top' to `<abc-temp-dir>/input.blif'..
Extracted 1294 gates and 1506 wires to a netlist network with 210 inputs and 204 outputs.

8.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       65
ABC RESULTS:            ANDNOT cells:      359
ABC RESULTS:               MUX cells:       61
ABC RESULTS:              NAND cells:       27
ABC RESULTS:               NOR cells:       65
ABC RESULTS:               NOT cells:       31
ABC RESULTS:                OR cells:      346
ABC RESULTS:             ORNOT cells:       87
ABC RESULTS:              XNOR cells:        5
ABC RESULTS:               XOR cells:       35
ABC RESULTS:        internal signals:     1092
ABC RESULTS:           input signals:      210
ABC RESULTS:          output signals:      204
Removing temp directory.

8.24. Executing OPT pass (performing simple optimizations).

8.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.
<suppressed ~1 debug messages>

8.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
<suppressed ~42 debug messages>
Removed a total of 14 cells.

8.24.3. Executing OPT_DFF pass (perform DFF optimizations).

8.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 1066 unused wires.
<suppressed ~6 debug messages>

8.24.5. Finished fast OPT passes.

8.25. Executing HIERARCHY pass (managing design hierarchy).

8.25.1. Analyzing design hierarchy..
Top module:  \i2c_master_top

8.25.2. Analyzing design hierarchy..
Top module:  \i2c_master_top
Removed 0 unused modules.

8.26. Printing statistics.

=== i2c_master_top ===

   Number of wires:               1176
   Number of wire bits:           1434
   Number of public wires:         138
   Number of public wire bits:     360
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1269
     $_ANDNOT_                     359
     $_AND_                         65
     $_DFFE_PP0P_                   92
     $_DFFE_PP1P_                   32
     $_DFFE_PP_                      1
     $_DFF_PP0_                     59
     $_DFF_PP1_                      8
     $_DFF_P_                       10
     $_MUX_                         61
     $_NAND_                        27
     $_NOR_                         51
     $_NOT_                         31
     $_ORNOT_                       87
     $_OR_                         346
     $_XNOR_                         5
     $_XOR_                         35

8.27. Executing CHECK pass (checking for obvious problems).
checking module i2c_master_top..
found and reported 0 problems.

9. Executing SHARE pass (SAT-based resource sharing).

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 51 unused wires.
<suppressed ~51 debug messages>

12. Printing statistics.

=== i2c_master_top ===

   Number of wires:               1125
   Number of wire bits:           1311
   Number of public wires:          87
   Number of public wire bits:     237
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1269
     $_ANDNOT_                     359
     $_AND_                         65
     $_DFFE_PP0P_                   92
     $_DFFE_PP1P_                   32
     $_DFFE_PP_                      1
     $_DFF_PP0_                     59
     $_DFF_PP1_                      8
     $_DFF_P_                       10
     $_MUX_                         61
     $_NAND_                        27
     $_NOR_                         51
     $_NOT_                         31
     $_ORNOT_                       87
     $_OR_                         346
     $_XNOR_                         5
     $_XOR_                         35

mapping tbuf

13. Executing TECHMAP pass (map to technology primitives).

13.1. Executing Verilog-2005 frontend: /home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

13.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

14. Executing SIMPLEMAP pass (map simple cells to gate primitives).

15. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module i2c_master_top..
  Treeifying 61 MUXes:
    Found tree with 1 MUXes at root \scl_padoen_o.
    Found tree with 1 MUXes at root \sda_padoen_o.
    Found tree with 1 MUXes at root $procmux$271.Y [0].
    Found tree with 1 MUXes at root $procmux$271.Y [1].
    Found tree with 1 MUXes at root $procmux$271.Y [2].
    Found tree with 1 MUXes at root $procmux$271.Y [3].
    Found tree with 1 MUXes at root $procmux$271.Y [4].
    Found tree with 1 MUXes at root $procmux$271.Y [5].
    Found tree with 1 MUXes at root $procmux$271.Y [6].
    Found tree with 1 MUXes at root $procmux$271.Y [7].
    Found tree with 1 MUXes at root $abc$6289$new_n1091_.
    Found tree with 1 MUXes at root $abc$6289$new_n1095_.
    Found tree with 1 MUXes at root $abc$6289$new_n1087_.
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][14].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][15].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][0].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][1].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][2].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][3].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][4].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][5].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][6].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][7].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][8].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][9].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][10].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][11].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][13].
    Found tree with 1 MUXes at root $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][12].
    Found tree with 1 MUXes at root $abc$6289$new_n1105_.
    Found tree with 1 MUXes at root $abc$6289$new_n1462_.
    Found tree with 1 MUXes at root $abc$6289$new_n1294_.
    Found tree with 1 MUXes at root $abc$6289$new_n1301_.
    Found tree with 1 MUXes at root $abc$6289$new_n1303_.
    Found tree with 1 MUXes at root $abc$6289$new_n1111_.
    Found tree with 1 MUXes at root $abc$6289$new_n1288_.
    Found tree with 1 MUXes at root $abc$6289$new_n1124_.
    Found tree with 1 MUXes at root $abc$6289$new_n1129_.
    Found tree with 1 MUXes at root $abc$6289$new_n1136_.
    Found tree with 1 MUXes at root $abc$6289$new_n1150_.
    Found tree with 1 MUXes at root $abc$6289$new_n1083_.
    Found tree with 1 MUXes at root $abc$6289$new_n1101_.
    Found tree with 1 MUXes at root $abc$6289$new_n1141_.
    Found tree with 1 MUXes at root $abc$6289$new_n1155_.
    Found tree with 1 MUXes at root $abc$6289$new_n1116_.
    Found tree with 1 MUXes at root $abc$6289$new_n923_.
    Found tree with 1 MUXes at root $abc$6289$new_n1226_.
    Found tree with 2 MUXes at root $abc$6289$new_n1229_.
    Found tree with 2 MUXes at root $abc$6289$new_n1232_.
    Found tree with 2 MUXes at root $abc$6289$new_n1235_.
    Found tree with 2 MUXes at root $abc$6289$new_n1238_.
    Found tree with 2 MUXes at root $abc$6289$new_n1241_.
    Found tree with 2 MUXes at root $abc$6289$new_n1244_.
    Found tree with 2 MUXes at root $abc$6289$new_n1247_.
    Finished treeification: Found 54 trees.
  Covering trees:
    Replaced tree at \scl_padoen_o: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \sda_padoen_o: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$271.Y [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$271.Y [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$271.Y [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$271.Y [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$271.Y [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$271.Y [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$271.Y [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $procmux$271.Y [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1091_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1095_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1087_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$flatten\byte_controller.\bit_controller.$0\cnt[15:0][12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1105_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1462_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1294_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1301_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1303_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1111_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1288_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1124_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1129_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1136_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1150_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1083_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1101_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1141_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1155_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1116_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n923_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1226_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1229_: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1232_: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1235_: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1238_: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1241_: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1244_: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$6289$new_n1247_: 2 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.
<suppressed ~1045 debug messages>

16. Executing TECHMAP pass (map to technology primitives).

16.1. Executing Verilog-2005 frontend: /home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v
Parsing Verilog input from `/home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX4_'.
Successfully finished Verilog frontend.

16.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

17. Executing SIMPLEMAP pass (map simple cells to gate primitives).

18. Executing TECHMAP pass (map to technology primitives).

18.1. Executing Verilog-2005 frontend: /home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v
Parsing Verilog input from `/home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX_'.
Successfully finished Verilog frontend.

18.2. Continuing TECHMAP pass.
Using template \$_MUX_ for cells of type $_MUX_.
No more expansions possible.
<suppressed ~64 debug messages>

19. Executing SIMPLEMAP pass (map simple cells to gate primitives).

20. Executing TECHMAP pass (map to technology primitives).

20.1. Executing Verilog-2005 frontend: /home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/ubuntu/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

20.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

21. Executing SIMPLEMAP pass (map simple cells to gate primitives).

22. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

22.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\i2c_master_top':
  mapped 151 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 40 $_DFF_PN1_ cells to \sky130_fd_sc_hd__dfstp_2 cells.
  mapped 11 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

23. Printing statistics.

=== i2c_master_top ===

   Number of wires:               1686
   Number of wire bits:           1872
   Number of public wires:          87
   Number of public wire bits:     237
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1585
     $_ANDNOT_                     359
     $_AND_                         65
     $_MUX_                        125
     $_NAND_                        27
     $_NOR_                         51
     $_NOT_                        222
     $_ORNOT_                       87
     $_OR_                         346
     $_XNOR_                         5
     $_XOR_                         35
     sky130_fd_sc_hd__dfrtp_2      151
     sky130_fd_sc_hd__dfstp_2       40
     sky130_fd_sc_hd__dfxtp_2       11
     sky130_fd_sc_hd__mux2_1        61

[INFO]: ABC: WireLoad : S_4

24. Executing ABC pass (technology mapping using ABC).

24.1. Extracting gate netlist of module `\i2c_master_top' to `/tmp/yosys-abc-rUaAG1/input.blif'..
Extracted 1322 gates and 1578 wires to a netlist network with 256 inputs and 437 outputs.

24.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-rUaAG1/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-rUaAG1/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-rUaAG1/input.blif 
ABC: + read_lib -w /openLANE_flow/designs/i2c/runs/5th_run_clk20_util35_tardens0.45_flat1_doubleQuotations_edited_config_of_design_noLEC/tmp/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.08 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/openLANE_flow/designs/i2c/runs/5th_run_clk20_util35_tardens0.45_flat1_doubleQuotations_edited_config_of_design_noLEC/tmp/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.12 sec
ABC: Memory =    7.77 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openLANE_flow/designs/i2c/runs/5th_run_clk20_util35_tardens0.45_flat1_doubleQuotations_edited_config_of_design_noLEC/tmp/synthesis/yosys.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_8".
ABC: Setting output load to be 17.650000.
ABC: + read_constr /openLANE_flow/designs/i2c/runs/5th_run_clk20_util35_tardens0.45_flat1_doubleQuotations_edited_config_of_design_noLEC/tmp/synthesis/yosys.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 20000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 20000.0 
ABC: + buffer -N 5 -S 2000.0 
ABC: Node 1057 has dup fanin 1055.
ABC: Node 1057 has dup fanin 1055.
ABC: Node 1180 has dup fanin 1082.
ABC: Node 1180 has dup fanin 1082.
ABC: Node 1256 has dup fanin 192.
ABC: Node 1256 has dup fanin 1253.
ABC: Node 1256 has dup fanin 192.
ABC: Node 1256 has dup fanin 1253.
ABC: Node 1304 has dup fanin 150.
ABC: Node 1304 has dup fanin 150.
ABC: + upsize -D 20000.0 
ABC: Current delay (4130.50 ps) does not exceed the target delay (20000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 20000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    995 ( 52.3 %)   Cap = 10.6 ff ( 10.8 %)   Area =     6346.09 ( 47.6 %)   Delay =  3900.33 ps  (  4.8 %)               
ABC: Path  0 --      59 : 0    3 pi                       A =   0.00  Df =   8.5   -5.9 ps  S =  20.6 ps  Cin =  0.0 ff  Cout =   6.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     845 : 2    3 sky130_fd_sc_hd__or2_2   A =   6.26  Df = 288.1 -177.4 ps  S =  62.3 ps  Cin =  1.5 ff  Cout =   5.4 ff  Cmax = 299.4 ff  G =  352  
ABC: Path  2 --     846 : 2    3 sky130_fd_sc_hd__or2_2   A =   6.26  Df = 572.5 -359.1 ps  S =  61.9 ps  Cin =  1.5 ff  Cout =   5.4 ff  Cmax = 299.4 ff  G =  352  
ABC: Path  3 --     847 : 2    4 sky130_fd_sc_hd__or2_2   A =   6.26  Df = 874.3 -540.5 ps  S =  73.9 ps  Cin =  1.5 ff  Cout =  10.0 ff  Cmax = 299.4 ff  G =  652  
ABC: Path  4 --     848 : 3    3 sky130_fd_sc_hd__or3_2   A =   7.51  Df =1315.8 -856.6 ps  S =  96.1 ps  Cin =  1.5 ff  Cout =   8.5 ff  Cmax = 310.4 ff  G =  537  
ABC: Path  5 --     849 : 2    3 sky130_fd_sc_hd__or2_2   A =   6.26  Df =1613.1-1045.9 ps  S =  61.9 ps  Cin =  1.5 ff  Cout =   5.4 ff  Cmax = 299.4 ff  G =  352  
ABC: Path  6 --     850 : 2    4 sky130_fd_sc_hd__or2_2   A =   6.26  Df =1902.8-1227.5 ps  S =  65.6 ps  Cin =  1.5 ff  Cout =   6.8 ff  Cmax = 299.4 ff  G =  445  
ABC: Path  7 --     851 : 4    4 sky130_fd_sc_hd__or4_2   A =   8.76  Df =2484.1-1681.8 ps  S = 128.3 ps  Cin =  1.5 ff  Cout =   9.9 ff  Cmax = 310.4 ff  G =  634  
ABC: Path  8 --     852 : 4    2 sky130_fd_sc_hd__or4_2   A =   8.76  Df =3080.1-2148.3 ps  S = 125.9 ps  Cin =  1.5 ff  Cout =   9.2 ff  Cmax = 310.4 ff  G =  589  
ABC: Path  9 --     853 : 1    1 sky130_fd_sc_hd__inv_2   A =   3.75  Df =3144.3-2186.0 ps  S =  38.1 ps  Cin =  4.5 ff  Cout =   2.4 ff  Cmax = 331.4 ff  G =   50  
ABC: Path 10 --     854 : 5    2 sky130_fd_sc_hd__a311o_2 A =  11.26  Df =3297.7-1983.1 ps  S = 117.8 ps  Cin =  2.3 ff  Cout =  19.1 ff  Cmax = 298.5 ff  G =  833  
ABC: Path 11 --     855 : 2    5 sky130_fd_sc_hd__or2_2   A =   6.26  Df =3460.0-1814.9 ps  S =  84.6 ps  Cin =  1.5 ff  Cout =  13.7 ff  Cmax = 299.4 ff  G =  906  
ABC: Path 12 --     857 : 1    4 sky130_fd_sc_hd__inv_2   A =   3.75  Df =3506.2-1783.9 ps  S =  54.3 ps  Cin =  4.5 ff  Cout =   9.1 ff  Cmax = 331.4 ff  G =  193  
ABC: Path 13 --     858 : 1    5 sky130_fd_sc_hd__buf_1   A =   3.75  Df =3623.7-1740.5 ps  S = 156.1 ps  Cin =  2.1 ff  Cout =  12.5 ff  Cmax = 130.0 ff  G =  551  
ABC: Path 14 --     859 : 4    1 sky130_fd_sc_hd__a22o_2  A =  10.01  Df =3900.3  -49.7 ps  S = 104.8 ps  Cin =  2.3 ff  Cout =  17.6 ff  Cmax = 301.2 ff  G =  751  
ABC: Start-point = pi58 (\byte_controller.bit_controller.cnt [1]).  End-point = po58 ($auto$rtlil.cc:2290:MuxGate$7947).
ABC: + print_stats -m 
ABC: netlist                       : i/o =  256/  437  lat =    0  nd =   995  edge =   2189  area =6344.75  delay =14.00  lev = 14
ABC: + write_blif /tmp/yosys-abc-rUaAG1/output.blif 

24.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a2bb2oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:      336
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:      184
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       34
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       26
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:       59
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       60
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       26
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:       10
ABC RESULTS:        internal signals:      885
ABC RESULTS:           input signals:      256
ABC RESULTS:          output signals:      437
Removing temp directory.

25. Executing SETUNDEF pass (replace undef values with defined constants).

26. Executing HILOMAP pass (mapping to constant drivers).

27. Executing SPLITNETS pass (splitting up multi-bit signals).

28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Removed 1 unused cells and 1847 unused wires.
<suppressed ~14 debug messages>

29. Executing INSBUF pass (insert buffer cells for connected wires).

30. Executing CHECK pass (checking for obvious problems).
checking module i2c_master_top..
Warning: Wire i2c_master_top.\wb_inta_o is used but has no driver.
Warning: Wire i2c_master_top.\wb_dat_o [7] is used but has no driver.
Warning: Wire i2c_master_top.\wb_dat_o [6] is used but has no driver.
Warning: Wire i2c_master_top.\wb_dat_o [5] is used but has no driver.
Warning: Wire i2c_master_top.\wb_dat_o [4] is used but has no driver.
Warning: Wire i2c_master_top.\wb_dat_o [3] is used but has no driver.
Warning: Wire i2c_master_top.\wb_dat_o [2] is used but has no driver.
Warning: Wire i2c_master_top.\wb_dat_o [1] is used but has no driver.
Warning: Wire i2c_master_top.\wb_dat_o [0] is used but has no driver.
Warning: Wire i2c_master_top.\wb_ack_o is used but has no driver.
Warning: Wire i2c_master_top.\sda_padoen_o is used but has no driver.
Warning: Wire i2c_master_top.\sda_pad_o is used but has no driver.
Warning: Wire i2c_master_top.\scl_padoen_o is used but has no driver.
Warning: Wire i2c_master_top.\scl_pad_o is used but has no driver.
found and reported 14 problems.

31. Printing statistics.

=== i2c_master_top ===

   Number of wires:               1263
   Number of wire bits:           1279
   Number of public wires:         209
   Number of public wire bits:     225
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1260
     sky130_fd_sc_hd__a211o_2        2
     sky130_fd_sc_hd__a21bo_2       15
     sky130_fd_sc_hd__a21boi_2       2
     sky130_fd_sc_hd__a21o_2         6
     sky130_fd_sc_hd__a21oi_2        6
     sky130_fd_sc_hd__a221o_2        9
     sky130_fd_sc_hd__a221oi_2       1
     sky130_fd_sc_hd__a22o_2        17
     sky130_fd_sc_hd__a2bb2o_2      13
     sky130_fd_sc_hd__a2bb2oi_2      1
     sky130_fd_sc_hd__a311o_2        3
     sky130_fd_sc_hd__a31o_2         8
     sky130_fd_sc_hd__a31oi_2        1
     sky130_fd_sc_hd__a32o_2        13
     sky130_fd_sc_hd__a41o_2         2
     sky130_fd_sc_hd__and2_2        10
     sky130_fd_sc_hd__and3_2        18
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__and4_2         4
     sky130_fd_sc_hd__and4b_2        3
     sky130_fd_sc_hd__and4bb_2       1
     sky130_fd_sc_hd__buf_1        336
     sky130_fd_sc_hd__conb_1         2
     sky130_fd_sc_hd__dfrtp_2      151
     sky130_fd_sc_hd__dfstp_2       40
     sky130_fd_sc_hd__dfxtp_2       11
     sky130_fd_sc_hd__inv_2        184
     sky130_fd_sc_hd__mux2_1        61
     sky130_fd_sc_hd__mux2_2         3
     sky130_fd_sc_hd__nand2_2       12
     sky130_fd_sc_hd__nand4_2        1
     sky130_fd_sc_hd__nor2_2        34
     sky130_fd_sc_hd__nor2b_2        1
     sky130_fd_sc_hd__nor3b_2        1
     sky130_fd_sc_hd__o2111a_2       2
     sky130_fd_sc_hd__o2111ai_2      8
     sky130_fd_sc_hd__o211a_2        6
     sky130_fd_sc_hd__o211ai_2       2
     sky130_fd_sc_hd__o21a_2        13
     sky130_fd_sc_hd__o21ai_2       11
     sky130_fd_sc_hd__o221a_2       14
     sky130_fd_sc_hd__o221ai_2       1
     sky130_fd_sc_hd__o22a_2        26
     sky130_fd_sc_hd__o22ai_2       10
     sky130_fd_sc_hd__o2bb2a_2       1
     sky130_fd_sc_hd__o2bb2ai_2      1
     sky130_fd_sc_hd__o311a_2        2
     sky130_fd_sc_hd__o31a_2         3
     sky130_fd_sc_hd__o31ai_2        2
     sky130_fd_sc_hd__o32a_2        59
     sky130_fd_sc_hd__or2_2         60
     sky130_fd_sc_hd__or3_2         26
     sky130_fd_sc_hd__or3b_2         8
     sky130_fd_sc_hd__or4_2         21
     sky130_fd_sc_hd__or4b_2        10

   Chip area for module '\i2c_master_top': 12293.040000

32. Executing Verilog backend.
Dumping module `\i2c_master_top'.

Warnings: 19 unique messages, 19 total
End of script. Logfile hash: 9cf43a1a5d, CPU: user 2.56s system 0.06s, MEM: 47.76 MB peak
Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)
Time spent: 38% 2x abc (1 sec), 15% 25x opt_expr (0 sec), ...
